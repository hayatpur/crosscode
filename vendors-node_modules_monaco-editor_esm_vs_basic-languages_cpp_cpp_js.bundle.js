(self["webpackChunkcross_code"] = self["webpackChunkcross_code"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_cpp_cpp_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/cpp/cpp.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/cpp/cpp.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conf": () => (/* binding */ conf),
/* harmony export */   "language": () => (/* binding */ language)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var conf = {
    comments: {
        lineComment: '//',
        blockComment: ['/*', '*/']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '[', close: ']' },
        { open: '{', close: '}' },
        { open: '(', close: ')' },
        { open: "'", close: "'", notIn: ['string', 'comment'] },
        { open: '"', close: '"', notIn: ['string'] }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" }
    ],
    folding: {
        markers: {
            start: new RegExp('^\\s*#pragma\\s+region\\b'),
            end: new RegExp('^\\s*#pragma\\s+endregion\\b')
        }
    }
};
var language = {
    defaultToken: '',
    tokenPostfix: '.cpp',
    brackets: [
        { token: 'delimiter.curly', open: '{', close: '}' },
        { token: 'delimiter.parenthesis', open: '(', close: ')' },
        { token: 'delimiter.square', open: '[', close: ']' },
        { token: 'delimiter.angle', open: '<', close: '>' }
    ],
    keywords: [
        'abstract',
        'amp',
        'array',
        'auto',
        'bool',
        'break',
        'case',
        'catch',
        'char',
        'class',
        'const',
        'constexpr',
        'const_cast',
        'continue',
        'cpu',
        'decltype',
        'default',
        'delegate',
        'delete',
        'do',
        'double',
        'dynamic_cast',
        'each',
        'else',
        'enum',
        'event',
        'explicit',
        'export',
        'extern',
        'false',
        'final',
        'finally',
        'float',
        'for',
        'friend',
        'gcnew',
        'generic',
        'goto',
        'if',
        'in',
        'initonly',
        'inline',
        'int',
        'interface',
        'interior_ptr',
        'internal',
        'literal',
        'long',
        'mutable',
        'namespace',
        'new',
        'noexcept',
        'nullptr',
        '__nullptr',
        'operator',
        'override',
        'partial',
        'pascal',
        'pin_ptr',
        'private',
        'property',
        'protected',
        'public',
        'ref',
        'register',
        'reinterpret_cast',
        'restrict',
        'return',
        'safe_cast',
        'sealed',
        'short',
        'signed',
        'sizeof',
        'static',
        'static_assert',
        'static_cast',
        'struct',
        'switch',
        'template',
        'this',
        'thread_local',
        'throw',
        'tile_static',
        'true',
        'try',
        'typedef',
        'typeid',
        'typename',
        'union',
        'unsigned',
        'using',
        'virtual',
        'void',
        'volatile',
        'wchar_t',
        'where',
        'while',
        '_asm',
        '_based',
        '_cdecl',
        '_declspec',
        '_fastcall',
        '_if_exists',
        '_if_not_exists',
        '_inline',
        '_multiple_inheritance',
        '_pascal',
        '_single_inheritance',
        '_stdcall',
        '_virtual_inheritance',
        '_w64',
        '__abstract',
        '__alignof',
        '__asm',
        '__assume',
        '__based',
        '__box',
        '__builtin_alignof',
        '__cdecl',
        '__clrcall',
        '__declspec',
        '__delegate',
        '__event',
        '__except',
        '__fastcall',
        '__finally',
        '__forceinline',
        '__gc',
        '__hook',
        '__identifier',
        '__if_exists',
        '__if_not_exists',
        '__inline',
        '__int128',
        '__int16',
        '__int32',
        '__int64',
        '__int8',
        '__interface',
        '__leave',
        '__m128',
        '__m128d',
        '__m128i',
        '__m256',
        '__m256d',
        '__m256i',
        '__m64',
        '__multiple_inheritance',
        '__newslot',
        '__nogc',
        '__noop',
        '__nounwind',
        '__novtordisp',
        '__pascal',
        '__pin',
        '__pragma',
        '__property',
        '__ptr32',
        '__ptr64',
        '__raise',
        '__restrict',
        '__resume',
        '__sealed',
        '__single_inheritance',
        '__stdcall',
        '__super',
        '__thiscall',
        '__try',
        '__try_cast',
        '__typeof',
        '__unaligned',
        '__unhook',
        '__uuidof',
        '__value',
        '__virtual_inheritance',
        '__w64',
        '__wchar_t'
    ],
    operators: [
        '=',
        '>',
        '<',
        '!',
        '~',
        '?',
        ':',
        '==',
        '<=',
        '>=',
        '!=',
        '&&',
        '||',
        '++',
        '--',
        '+',
        '-',
        '*',
        '/',
        '&',
        '|',
        '^',
        '%',
        '<<',
        '>>',
        '>>>',
        '+=',
        '-=',
        '*=',
        '/=',
        '&=',
        '|=',
        '^=',
        '%=',
        '<<=',
        '>>=',
        '>>>='
    ],
    // we include these common regular expressions
    symbols: /[=><!~?:&|+\-*\/\^%]+/,
    escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
    integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
    floatsuffix: /[fFlL]?/,
    encoding: /u|u8|U|L/,
    // The main tokenizer for our languages
    tokenizer: {
        root: [
            // C++ 11 Raw String
            [/@encoding?R\"(?:([^ ()\\\t]*))\(/, { token: 'string.raw.begin', next: '@raw.$1' }],
            // identifiers and keywords
            [
                /[a-zA-Z_]\w*/,
                {
                    cases: {
                        '@keywords': { token: 'keyword.$0' },
                        '@default': 'identifier'
                    }
                }
            ],
            // The preprocessor checks must be before whitespace as they check /^\s*#/ which
            // otherwise fails to match later after other whitespace has been removed.
            // Inclusion
            [/^\s*#\s*include/, { token: 'keyword.directive.include', next: '@include' }],
            // Preprocessor directive
            [/^\s*#\s*\w+/, 'keyword.directive'],
            // whitespace
            { include: '@whitespace' },
            // [[ attributes ]].
            [/\[\s*\[/, { token: 'annotation', next: '@annotation' }],
            // delimiters and operators
            [/[{}()\[\]]/, '@brackets'],
            [/[<>](?!@symbols)/, '@brackets'],
            [
                /@symbols/,
                {
                    cases: {
                        '@operators': 'delimiter',
                        '@default': ''
                    }
                }
            ],
            // numbers
            [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
            [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
            [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
            [/\d[\d']*\d(@integersuffix)/, 'number'],
            [/\d(@integersuffix)/, 'number'],
            // delimiter: after number because of .\d floats
            [/[;,.]/, 'delimiter'],
            // strings
            [/"([^"\\]|\\.)*$/, 'string.invalid'],
            [/"/, 'string', '@string'],
            // characters
            [/'[^\\']'/, 'string'],
            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
            [/'/, 'string.invalid']
        ],
        whitespace: [
            [/[ \t\r\n]+/, ''],
            [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
            [/\/\*/, 'comment', '@comment'],
            [/\/\/.*$/, 'comment']
        ],
        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        //Identical copy of comment above, except for the addition of .doc
        doccomment: [
            [/[^\/*]+/, 'comment.doc'],
            [/\*\//, 'comment.doc', '@pop'],
            [/[\/*]/, 'comment.doc']
        ],
        string: [
            [/[^\\"]+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [/"/, 'string', '@pop']
        ],
        raw: [
            [
                /(.*)(\))(?:([^ ()\\\t"]*))(\")/,
                {
                    cases: {
                        '$3==$S2': [
                            'string.raw',
                            'string.raw.end',
                            'string.raw.end',
                            { token: 'string.raw.end', next: '@pop' }
                        ],
                        '@default': ['string.raw', 'string.raw', 'string.raw', 'string.raw']
                    }
                }
            ],
            [/.*/, 'string.raw']
        ],
        annotation: [
            { include: '@whitespace' },
            [/using|alignas/, 'keyword'],
            [/[a-zA-Z0-9_]+/, 'annotation'],
            [/[,:]/, 'delimiter'],
            [/[()]/, '@brackets'],
            [/\]\s*\]/, { token: 'annotation', next: '@pop' }]
        ],
        include: [
            [
                /(\s*)(<)([^<>]*)(>)/,
                [
                    '',
                    'keyword.directive.include.begin',
                    'string.include.identifier',
                    { token: 'keyword.directive.include.end', next: '@pop' }
                ]
            ],
            [
                /(\s*)(")([^"]*)(")/,
                [
                    '',
                    'keyword.directive.include.begin',
                    'string.include.identifier',
                    { token: 'keyword.directive.include.end', next: '@pop' }
                ]
            ]
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcm9zcy1jb2RlLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2ljLWxhbmd1YWdlcy9jcHAvY3BwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsU0FBUyxZQUFZLEdBQUc7QUFDakMsU0FBUyx3QkFBd0I7QUFDakMsU0FBUyxzREFBc0Q7QUFDL0QsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTLFNBQVMsWUFBWSxHQUFHO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTLG1DQUFtQyxZQUFZLEdBQUc7QUFDM0QsU0FBUyx3REFBd0Q7QUFDakUsU0FBUyxtREFBbUQ7QUFDNUQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsSUFBSSxjQUFjLEVBQUUsY0FBYyxFQUFFO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELDZDQUE2QztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHNCQUFzQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx1REFBdUQ7QUFDeEY7QUFDQTtBQUNBO0FBQ0EsYUFBYSx5QkFBeUI7QUFDdEM7QUFDQSx5QkFBeUIsMkNBQTJDO0FBQ3BFO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlCQUF5QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvQ0FBb0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfbW9uYWNvLWVkaXRvcl9lc21fdnNfYmFzaWMtbGFuZ3VhZ2VzX2NwcF9jcHBfanMuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmV4cG9ydCB2YXIgY29uZiA9IHtcclxuICAgIGNvbW1lbnRzOiB7XHJcbiAgICAgICAgbGluZUNvbW1lbnQ6ICcvLycsXHJcbiAgICAgICAgYmxvY2tDb21tZW50OiBbJy8qJywgJyovJ11cclxuICAgIH0sXHJcbiAgICBicmFja2V0czogW1xyXG4gICAgICAgIFsneycsICd9J10sXHJcbiAgICAgICAgWydbJywgJ10nXSxcclxuICAgICAgICBbJygnLCAnKSddXHJcbiAgICBdLFxyXG4gICAgYXV0b0Nsb3NpbmdQYWlyczogW1xyXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcclxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxyXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiwgbm90SW46IFsnc3RyaW5nJywgJ2NvbW1lbnQnXSB9LFxyXG4gICAgICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicsIG5vdEluOiBbJ3N0cmluZyddIH1cclxuICAgIF0sXHJcbiAgICBzdXJyb3VuZGluZ1BhaXJzOiBbXHJcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcclxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxyXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnXCInLCBjbG9zZTogJ1wiJyB9LFxyXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9XHJcbiAgICBdLFxyXG4gICAgZm9sZGluZzoge1xyXG4gICAgICAgIG1hcmtlcnM6IHtcclxuICAgICAgICAgICAgc3RhcnQ6IG5ldyBSZWdFeHAoJ15cXFxccyojcHJhZ21hXFxcXHMrcmVnaW9uXFxcXGInKSxcclxuICAgICAgICAgICAgZW5kOiBuZXcgUmVnRXhwKCdeXFxcXHMqI3ByYWdtYVxcXFxzK2VuZHJlZ2lvblxcXFxiJylcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydCB2YXIgbGFuZ3VhZ2UgPSB7XHJcbiAgICBkZWZhdWx0VG9rZW46ICcnLFxyXG4gICAgdG9rZW5Qb3N0Zml4OiAnLmNwcCcsXHJcbiAgICBicmFja2V0czogW1xyXG4gICAgICAgIHsgdG9rZW46ICdkZWxpbWl0ZXIuY3VybHknLCBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcclxuICAgICAgICB7IHRva2VuOiAnZGVsaW1pdGVyLnBhcmVudGhlc2lzJywgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXHJcbiAgICAgICAgeyB0b2tlbjogJ2RlbGltaXRlci5zcXVhcmUnLCBvcGVuOiAnWycsIGNsb3NlOiAnXScgfSxcclxuICAgICAgICB7IHRva2VuOiAnZGVsaW1pdGVyLmFuZ2xlJywgb3BlbjogJzwnLCBjbG9zZTogJz4nIH1cclxuICAgIF0sXHJcbiAgICBrZXl3b3JkczogW1xyXG4gICAgICAgICdhYnN0cmFjdCcsXHJcbiAgICAgICAgJ2FtcCcsXHJcbiAgICAgICAgJ2FycmF5JyxcclxuICAgICAgICAnYXV0bycsXHJcbiAgICAgICAgJ2Jvb2wnLFxyXG4gICAgICAgICdicmVhaycsXHJcbiAgICAgICAgJ2Nhc2UnLFxyXG4gICAgICAgICdjYXRjaCcsXHJcbiAgICAgICAgJ2NoYXInLFxyXG4gICAgICAgICdjbGFzcycsXHJcbiAgICAgICAgJ2NvbnN0JyxcclxuICAgICAgICAnY29uc3RleHByJyxcclxuICAgICAgICAnY29uc3RfY2FzdCcsXHJcbiAgICAgICAgJ2NvbnRpbnVlJyxcclxuICAgICAgICAnY3B1JyxcclxuICAgICAgICAnZGVjbHR5cGUnLFxyXG4gICAgICAgICdkZWZhdWx0JyxcclxuICAgICAgICAnZGVsZWdhdGUnLFxyXG4gICAgICAgICdkZWxldGUnLFxyXG4gICAgICAgICdkbycsXHJcbiAgICAgICAgJ2RvdWJsZScsXHJcbiAgICAgICAgJ2R5bmFtaWNfY2FzdCcsXHJcbiAgICAgICAgJ2VhY2gnLFxyXG4gICAgICAgICdlbHNlJyxcclxuICAgICAgICAnZW51bScsXHJcbiAgICAgICAgJ2V2ZW50JyxcclxuICAgICAgICAnZXhwbGljaXQnLFxyXG4gICAgICAgICdleHBvcnQnLFxyXG4gICAgICAgICdleHRlcm4nLFxyXG4gICAgICAgICdmYWxzZScsXHJcbiAgICAgICAgJ2ZpbmFsJyxcclxuICAgICAgICAnZmluYWxseScsXHJcbiAgICAgICAgJ2Zsb2F0JyxcclxuICAgICAgICAnZm9yJyxcclxuICAgICAgICAnZnJpZW5kJyxcclxuICAgICAgICAnZ2NuZXcnLFxyXG4gICAgICAgICdnZW5lcmljJyxcclxuICAgICAgICAnZ290bycsXHJcbiAgICAgICAgJ2lmJyxcclxuICAgICAgICAnaW4nLFxyXG4gICAgICAgICdpbml0b25seScsXHJcbiAgICAgICAgJ2lubGluZScsXHJcbiAgICAgICAgJ2ludCcsXHJcbiAgICAgICAgJ2ludGVyZmFjZScsXHJcbiAgICAgICAgJ2ludGVyaW9yX3B0cicsXHJcbiAgICAgICAgJ2ludGVybmFsJyxcclxuICAgICAgICAnbGl0ZXJhbCcsXHJcbiAgICAgICAgJ2xvbmcnLFxyXG4gICAgICAgICdtdXRhYmxlJyxcclxuICAgICAgICAnbmFtZXNwYWNlJyxcclxuICAgICAgICAnbmV3JyxcclxuICAgICAgICAnbm9leGNlcHQnLFxyXG4gICAgICAgICdudWxscHRyJyxcclxuICAgICAgICAnX19udWxscHRyJyxcclxuICAgICAgICAnb3BlcmF0b3InLFxyXG4gICAgICAgICdvdmVycmlkZScsXHJcbiAgICAgICAgJ3BhcnRpYWwnLFxyXG4gICAgICAgICdwYXNjYWwnLFxyXG4gICAgICAgICdwaW5fcHRyJyxcclxuICAgICAgICAncHJpdmF0ZScsXHJcbiAgICAgICAgJ3Byb3BlcnR5JyxcclxuICAgICAgICAncHJvdGVjdGVkJyxcclxuICAgICAgICAncHVibGljJyxcclxuICAgICAgICAncmVmJyxcclxuICAgICAgICAncmVnaXN0ZXInLFxyXG4gICAgICAgICdyZWludGVycHJldF9jYXN0JyxcclxuICAgICAgICAncmVzdHJpY3QnLFxyXG4gICAgICAgICdyZXR1cm4nLFxyXG4gICAgICAgICdzYWZlX2Nhc3QnLFxyXG4gICAgICAgICdzZWFsZWQnLFxyXG4gICAgICAgICdzaG9ydCcsXHJcbiAgICAgICAgJ3NpZ25lZCcsXHJcbiAgICAgICAgJ3NpemVvZicsXHJcbiAgICAgICAgJ3N0YXRpYycsXHJcbiAgICAgICAgJ3N0YXRpY19hc3NlcnQnLFxyXG4gICAgICAgICdzdGF0aWNfY2FzdCcsXHJcbiAgICAgICAgJ3N0cnVjdCcsXHJcbiAgICAgICAgJ3N3aXRjaCcsXHJcbiAgICAgICAgJ3RlbXBsYXRlJyxcclxuICAgICAgICAndGhpcycsXHJcbiAgICAgICAgJ3RocmVhZF9sb2NhbCcsXHJcbiAgICAgICAgJ3Rocm93JyxcclxuICAgICAgICAndGlsZV9zdGF0aWMnLFxyXG4gICAgICAgICd0cnVlJyxcclxuICAgICAgICAndHJ5JyxcclxuICAgICAgICAndHlwZWRlZicsXHJcbiAgICAgICAgJ3R5cGVpZCcsXHJcbiAgICAgICAgJ3R5cGVuYW1lJyxcclxuICAgICAgICAndW5pb24nLFxyXG4gICAgICAgICd1bnNpZ25lZCcsXHJcbiAgICAgICAgJ3VzaW5nJyxcclxuICAgICAgICAndmlydHVhbCcsXHJcbiAgICAgICAgJ3ZvaWQnLFxyXG4gICAgICAgICd2b2xhdGlsZScsXHJcbiAgICAgICAgJ3djaGFyX3QnLFxyXG4gICAgICAgICd3aGVyZScsXHJcbiAgICAgICAgJ3doaWxlJyxcclxuICAgICAgICAnX2FzbScsXHJcbiAgICAgICAgJ19iYXNlZCcsXHJcbiAgICAgICAgJ19jZGVjbCcsXHJcbiAgICAgICAgJ19kZWNsc3BlYycsXHJcbiAgICAgICAgJ19mYXN0Y2FsbCcsXHJcbiAgICAgICAgJ19pZl9leGlzdHMnLFxyXG4gICAgICAgICdfaWZfbm90X2V4aXN0cycsXHJcbiAgICAgICAgJ19pbmxpbmUnLFxyXG4gICAgICAgICdfbXVsdGlwbGVfaW5oZXJpdGFuY2UnLFxyXG4gICAgICAgICdfcGFzY2FsJyxcclxuICAgICAgICAnX3NpbmdsZV9pbmhlcml0YW5jZScsXHJcbiAgICAgICAgJ19zdGRjYWxsJyxcclxuICAgICAgICAnX3ZpcnR1YWxfaW5oZXJpdGFuY2UnLFxyXG4gICAgICAgICdfdzY0JyxcclxuICAgICAgICAnX19hYnN0cmFjdCcsXHJcbiAgICAgICAgJ19fYWxpZ25vZicsXHJcbiAgICAgICAgJ19fYXNtJyxcclxuICAgICAgICAnX19hc3N1bWUnLFxyXG4gICAgICAgICdfX2Jhc2VkJyxcclxuICAgICAgICAnX19ib3gnLFxyXG4gICAgICAgICdfX2J1aWx0aW5fYWxpZ25vZicsXHJcbiAgICAgICAgJ19fY2RlY2wnLFxyXG4gICAgICAgICdfX2NscmNhbGwnLFxyXG4gICAgICAgICdfX2RlY2xzcGVjJyxcclxuICAgICAgICAnX19kZWxlZ2F0ZScsXHJcbiAgICAgICAgJ19fZXZlbnQnLFxyXG4gICAgICAgICdfX2V4Y2VwdCcsXHJcbiAgICAgICAgJ19fZmFzdGNhbGwnLFxyXG4gICAgICAgICdfX2ZpbmFsbHknLFxyXG4gICAgICAgICdfX2ZvcmNlaW5saW5lJyxcclxuICAgICAgICAnX19nYycsXHJcbiAgICAgICAgJ19faG9vaycsXHJcbiAgICAgICAgJ19faWRlbnRpZmllcicsXHJcbiAgICAgICAgJ19faWZfZXhpc3RzJyxcclxuICAgICAgICAnX19pZl9ub3RfZXhpc3RzJyxcclxuICAgICAgICAnX19pbmxpbmUnLFxyXG4gICAgICAgICdfX2ludDEyOCcsXHJcbiAgICAgICAgJ19faW50MTYnLFxyXG4gICAgICAgICdfX2ludDMyJyxcclxuICAgICAgICAnX19pbnQ2NCcsXHJcbiAgICAgICAgJ19faW50OCcsXHJcbiAgICAgICAgJ19faW50ZXJmYWNlJyxcclxuICAgICAgICAnX19sZWF2ZScsXHJcbiAgICAgICAgJ19fbTEyOCcsXHJcbiAgICAgICAgJ19fbTEyOGQnLFxyXG4gICAgICAgICdfX20xMjhpJyxcclxuICAgICAgICAnX19tMjU2JyxcclxuICAgICAgICAnX19tMjU2ZCcsXHJcbiAgICAgICAgJ19fbTI1NmknLFxyXG4gICAgICAgICdfX202NCcsXHJcbiAgICAgICAgJ19fbXVsdGlwbGVfaW5oZXJpdGFuY2UnLFxyXG4gICAgICAgICdfX25ld3Nsb3QnLFxyXG4gICAgICAgICdfX25vZ2MnLFxyXG4gICAgICAgICdfX25vb3AnLFxyXG4gICAgICAgICdfX25vdW53aW5kJyxcclxuICAgICAgICAnX19ub3Z0b3JkaXNwJyxcclxuICAgICAgICAnX19wYXNjYWwnLFxyXG4gICAgICAgICdfX3BpbicsXHJcbiAgICAgICAgJ19fcHJhZ21hJyxcclxuICAgICAgICAnX19wcm9wZXJ0eScsXHJcbiAgICAgICAgJ19fcHRyMzInLFxyXG4gICAgICAgICdfX3B0cjY0JyxcclxuICAgICAgICAnX19yYWlzZScsXHJcbiAgICAgICAgJ19fcmVzdHJpY3QnLFxyXG4gICAgICAgICdfX3Jlc3VtZScsXHJcbiAgICAgICAgJ19fc2VhbGVkJyxcclxuICAgICAgICAnX19zaW5nbGVfaW5oZXJpdGFuY2UnLFxyXG4gICAgICAgICdfX3N0ZGNhbGwnLFxyXG4gICAgICAgICdfX3N1cGVyJyxcclxuICAgICAgICAnX190aGlzY2FsbCcsXHJcbiAgICAgICAgJ19fdHJ5JyxcclxuICAgICAgICAnX190cnlfY2FzdCcsXHJcbiAgICAgICAgJ19fdHlwZW9mJyxcclxuICAgICAgICAnX191bmFsaWduZWQnLFxyXG4gICAgICAgICdfX3VuaG9vaycsXHJcbiAgICAgICAgJ19fdXVpZG9mJyxcclxuICAgICAgICAnX192YWx1ZScsXHJcbiAgICAgICAgJ19fdmlydHVhbF9pbmhlcml0YW5jZScsXHJcbiAgICAgICAgJ19fdzY0JyxcclxuICAgICAgICAnX193Y2hhcl90J1xyXG4gICAgXSxcclxuICAgIG9wZXJhdG9yczogW1xyXG4gICAgICAgICc9JyxcclxuICAgICAgICAnPicsXHJcbiAgICAgICAgJzwnLFxyXG4gICAgICAgICchJyxcclxuICAgICAgICAnficsXHJcbiAgICAgICAgJz8nLFxyXG4gICAgICAgICc6JyxcclxuICAgICAgICAnPT0nLFxyXG4gICAgICAgICc8PScsXHJcbiAgICAgICAgJz49JyxcclxuICAgICAgICAnIT0nLFxyXG4gICAgICAgICcmJicsXHJcbiAgICAgICAgJ3x8JyxcclxuICAgICAgICAnKysnLFxyXG4gICAgICAgICctLScsXHJcbiAgICAgICAgJysnLFxyXG4gICAgICAgICctJyxcclxuICAgICAgICAnKicsXHJcbiAgICAgICAgJy8nLFxyXG4gICAgICAgICcmJyxcclxuICAgICAgICAnfCcsXHJcbiAgICAgICAgJ14nLFxyXG4gICAgICAgICclJyxcclxuICAgICAgICAnPDwnLFxyXG4gICAgICAgICc+PicsXHJcbiAgICAgICAgJz4+PicsXHJcbiAgICAgICAgJys9JyxcclxuICAgICAgICAnLT0nLFxyXG4gICAgICAgICcqPScsXHJcbiAgICAgICAgJy89JyxcclxuICAgICAgICAnJj0nLFxyXG4gICAgICAgICd8PScsXHJcbiAgICAgICAgJ149JyxcclxuICAgICAgICAnJT0nLFxyXG4gICAgICAgICc8PD0nLFxyXG4gICAgICAgICc+Pj0nLFxyXG4gICAgICAgICc+Pj49J1xyXG4gICAgXSxcclxuICAgIC8vIHdlIGluY2x1ZGUgdGhlc2UgY29tbW9uIHJlZ3VsYXIgZXhwcmVzc2lvbnNcclxuICAgIHN5bWJvbHM6IC9bPT48IX4/OiZ8K1xcLSpcXC9cXF4lXSsvLFxyXG4gICAgZXNjYXBlczogL1xcXFwoPzpbYWJmbnJ0dlxcXFxcIiddfHhbMC05QS1GYS1mXXsxLDR9fHVbMC05QS1GYS1mXXs0fXxVWzAtOUEtRmEtZl17OH0pLyxcclxuICAgIGludGVnZXJzdWZmaXg6IC8obGx8TEx8dXxVfGx8TCk/KGxsfExMfHV8VXxsfEwpPy8sXHJcbiAgICBmbG9hdHN1ZmZpeDogL1tmRmxMXT8vLFxyXG4gICAgZW5jb2Rpbmc6IC91fHU4fFV8TC8sXHJcbiAgICAvLyBUaGUgbWFpbiB0b2tlbml6ZXIgZm9yIG91ciBsYW5ndWFnZXNcclxuICAgIHRva2VuaXplcjoge1xyXG4gICAgICAgIHJvb3Q6IFtcclxuICAgICAgICAgICAgLy8gQysrIDExIFJhdyBTdHJpbmdcclxuICAgICAgICAgICAgWy9AZW5jb2Rpbmc/UlxcXCIoPzooW14gKClcXFxcXFx0XSopKVxcKC8sIHsgdG9rZW46ICdzdHJpbmcucmF3LmJlZ2luJywgbmV4dDogJ0ByYXcuJDEnIH1dLFxyXG4gICAgICAgICAgICAvLyBpZGVudGlmaWVycyBhbmQga2V5d29yZHNcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgL1thLXpBLVpfXVxcdyovLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAa2V5d29yZHMnOiB7IHRva2VuOiAna2V5d29yZC4kMCcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogJ2lkZW50aWZpZXInXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAvLyBUaGUgcHJlcHJvY2Vzc29yIGNoZWNrcyBtdXN0IGJlIGJlZm9yZSB3aGl0ZXNwYWNlIGFzIHRoZXkgY2hlY2sgL15cXHMqIy8gd2hpY2hcclxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGZhaWxzIHRvIG1hdGNoIGxhdGVyIGFmdGVyIG90aGVyIHdoaXRlc3BhY2UgaGFzIGJlZW4gcmVtb3ZlZC5cclxuICAgICAgICAgICAgLy8gSW5jbHVzaW9uXHJcbiAgICAgICAgICAgIFsvXlxccyojXFxzKmluY2x1ZGUvLCB7IHRva2VuOiAna2V5d29yZC5kaXJlY3RpdmUuaW5jbHVkZScsIG5leHQ6ICdAaW5jbHVkZScgfV0sXHJcbiAgICAgICAgICAgIC8vIFByZXByb2Nlc3NvciBkaXJlY3RpdmVcclxuICAgICAgICAgICAgWy9eXFxzKiNcXHMqXFx3Ky8sICdrZXl3b3JkLmRpcmVjdGl2ZSddLFxyXG4gICAgICAgICAgICAvLyB3aGl0ZXNwYWNlXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0B3aGl0ZXNwYWNlJyB9LFxyXG4gICAgICAgICAgICAvLyBbWyBhdHRyaWJ1dGVzIF1dLlxyXG4gICAgICAgICAgICBbL1xcW1xccypcXFsvLCB7IHRva2VuOiAnYW5ub3RhdGlvbicsIG5leHQ6ICdAYW5ub3RhdGlvbicgfV0sXHJcbiAgICAgICAgICAgIC8vIGRlbGltaXRlcnMgYW5kIG9wZXJhdG9yc1xyXG4gICAgICAgICAgICBbL1t7fSgpXFxbXFxdXS8sICdAYnJhY2tldHMnXSxcclxuICAgICAgICAgICAgWy9bPD5dKD8hQHN5bWJvbHMpLywgJ0BicmFja2V0cyddLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAvQHN5bWJvbHMvLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAb3BlcmF0b3JzJzogJ2RlbGltaXRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAvLyBudW1iZXJzXHJcbiAgICAgICAgICAgIFsvXFxkKlxcZCtbZUVdKFtcXC0rXT9cXGQrKT8oQGZsb2F0c3VmZml4KS8sICdudW1iZXIuZmxvYXQnXSxcclxuICAgICAgICAgICAgWy9cXGQqXFwuXFxkKyhbZUVdW1xcLStdP1xcZCspPyhAZmxvYXRzdWZmaXgpLywgJ251bWJlci5mbG9hdCddLFxyXG4gICAgICAgICAgICBbLzBbeFhdWzAtOWEtZkEtRiddKlswLTlhLWZBLUZdKEBpbnRlZ2Vyc3VmZml4KS8sICdudW1iZXIuaGV4J10sXHJcbiAgICAgICAgICAgIFsvMFswLTcnXSpbMC03XShAaW50ZWdlcnN1ZmZpeCkvLCAnbnVtYmVyLm9jdGFsJ10sXHJcbiAgICAgICAgICAgIFsvMFtiQl1bMC0xJ10qWzAtMV0oQGludGVnZXJzdWZmaXgpLywgJ251bWJlci5iaW5hcnknXSxcclxuICAgICAgICAgICAgWy9cXGRbXFxkJ10qXFxkKEBpbnRlZ2Vyc3VmZml4KS8sICdudW1iZXInXSxcclxuICAgICAgICAgICAgWy9cXGQoQGludGVnZXJzdWZmaXgpLywgJ251bWJlciddLFxyXG4gICAgICAgICAgICAvLyBkZWxpbWl0ZXI6IGFmdGVyIG51bWJlciBiZWNhdXNlIG9mIC5cXGQgZmxvYXRzXHJcbiAgICAgICAgICAgIFsvWzssLl0vLCAnZGVsaW1pdGVyJ10sXHJcbiAgICAgICAgICAgIC8vIHN0cmluZ3NcclxuICAgICAgICAgICAgWy9cIihbXlwiXFxcXF18XFxcXC4pKiQvLCAnc3RyaW5nLmludmFsaWQnXSxcclxuICAgICAgICAgICAgWy9cIi8sICdzdHJpbmcnLCAnQHN0cmluZyddLFxyXG4gICAgICAgICAgICAvLyBjaGFyYWN0ZXJzXHJcbiAgICAgICAgICAgIFsvJ1teXFxcXCddJy8sICdzdHJpbmcnXSxcclxuICAgICAgICAgICAgWy8oJykoQGVzY2FwZXMpKCcpLywgWydzdHJpbmcnLCAnc3RyaW5nLmVzY2FwZScsICdzdHJpbmcnXV0sXHJcbiAgICAgICAgICAgIFsvJy8sICdzdHJpbmcuaW52YWxpZCddXHJcbiAgICAgICAgXSxcclxuICAgICAgICB3aGl0ZXNwYWNlOiBbXHJcbiAgICAgICAgICAgIFsvWyBcXHRcXHJcXG5dKy8sICcnXSxcclxuICAgICAgICAgICAgWy9cXC9cXCpcXCooPyFcXC8pLywgJ2NvbW1lbnQuZG9jJywgJ0Bkb2Njb21tZW50J10sXHJcbiAgICAgICAgICAgIFsvXFwvXFwqLywgJ2NvbW1lbnQnLCAnQGNvbW1lbnQnXSxcclxuICAgICAgICAgICAgWy9cXC9cXC8uKiQvLCAnY29tbWVudCddXHJcbiAgICAgICAgXSxcclxuICAgICAgICBjb21tZW50OiBbXHJcbiAgICAgICAgICAgIFsvW15cXC8qXSsvLCAnY29tbWVudCddLFxyXG4gICAgICAgICAgICBbL1xcKlxcLy8sICdjb21tZW50JywgJ0Bwb3AnXSxcclxuICAgICAgICAgICAgWy9bXFwvKl0vLCAnY29tbWVudCddXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvL0lkZW50aWNhbCBjb3B5IG9mIGNvbW1lbnQgYWJvdmUsIGV4Y2VwdCBmb3IgdGhlIGFkZGl0aW9uIG9mIC5kb2NcclxuICAgICAgICBkb2Njb21tZW50OiBbXHJcbiAgICAgICAgICAgIFsvW15cXC8qXSsvLCAnY29tbWVudC5kb2MnXSxcclxuICAgICAgICAgICAgWy9cXCpcXC8vLCAnY29tbWVudC5kb2MnLCAnQHBvcCddLFxyXG4gICAgICAgICAgICBbL1tcXC8qXS8sICdjb21tZW50LmRvYyddXHJcbiAgICAgICAgXSxcclxuICAgICAgICBzdHJpbmc6IFtcclxuICAgICAgICAgICAgWy9bXlxcXFxcIl0rLywgJ3N0cmluZyddLFxyXG4gICAgICAgICAgICBbL0Blc2NhcGVzLywgJ3N0cmluZy5lc2NhcGUnXSxcclxuICAgICAgICAgICAgWy9cXFxcLi8sICdzdHJpbmcuZXNjYXBlLmludmFsaWQnXSxcclxuICAgICAgICAgICAgWy9cIi8sICdzdHJpbmcnLCAnQHBvcCddXHJcbiAgICAgICAgXSxcclxuICAgICAgICByYXc6IFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgLyguKikoXFwpKSg/OihbXiAoKVxcXFxcXHRcIl0qKSkoXFxcIikvLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckMz09JFMyJzogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0cmluZy5yYXcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0cmluZy5yYXcuZW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdHJpbmcucmF3LmVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRva2VuOiAnc3RyaW5nLnJhdy5lbmQnLCBuZXh0OiAnQHBvcCcgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiBbJ3N0cmluZy5yYXcnLCAnc3RyaW5nLnJhdycsICdzdHJpbmcucmF3JywgJ3N0cmluZy5yYXcnXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgWy8uKi8sICdzdHJpbmcucmF3J11cclxuICAgICAgICBdLFxyXG4gICAgICAgIGFubm90YXRpb246IFtcclxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHdoaXRlc3BhY2UnIH0sXHJcbiAgICAgICAgICAgIFsvdXNpbmd8YWxpZ25hcy8sICdrZXl3b3JkJ10sXHJcbiAgICAgICAgICAgIFsvW2EtekEtWjAtOV9dKy8sICdhbm5vdGF0aW9uJ10sXHJcbiAgICAgICAgICAgIFsvWyw6XS8sICdkZWxpbWl0ZXInXSxcclxuICAgICAgICAgICAgWy9bKCldLywgJ0BicmFja2V0cyddLFxyXG4gICAgICAgICAgICBbL1xcXVxccypcXF0vLCB7IHRva2VuOiAnYW5ub3RhdGlvbicsIG5leHQ6ICdAcG9wJyB9XVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgaW5jbHVkZTogW1xyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAvKFxccyopKDwpKFtePD5dKikoPikvLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICdrZXl3b3JkLmRpcmVjdGl2ZS5pbmNsdWRlLmJlZ2luJyxcclxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nLmluY2x1ZGUuaWRlbnRpZmllcicsXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0b2tlbjogJ2tleXdvcmQuZGlyZWN0aXZlLmluY2x1ZGUuZW5kJywgbmV4dDogJ0Bwb3AnIH1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgLyhcXHMqKShcIikoW15cIl0qKShcIikvLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICdrZXl3b3JkLmRpcmVjdGl2ZS5pbmNsdWRlLmJlZ2luJyxcclxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nLmluY2x1ZGUuaWRlbnRpZmllcicsXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0b2tlbjogJ2tleXdvcmQuZGlyZWN0aXZlLmluY2x1ZGUuZW5kJywgbmV4dDogJ0Bwb3AnIH1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF1cclxuICAgIH1cclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==