(self["webpackChunkcross_code"] = self["webpackChunkcross_code"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_bicep_bicep_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conf": () => (/* binding */ conf),
/* harmony export */   "language": () => (/* binding */ language)
/* harmony export */ });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var bounded = function (text) { return "\\b" + text + "\\b"; };
var identifierStart = '[_a-zA-Z]';
var identifierContinue = '[_a-zA-Z0-9]';
var identifier = bounded("" + identifierStart + identifierContinue + "*");
var keywords = [
    'targetScope',
    'resource',
    'module',
    'param',
    'var',
    'output',
    'for',
    'in',
    'if',
    'existing'
];
var namedLiterals = ['true', 'false', 'null'];
var nonCommentWs = "[ \\t\\r\\n]";
var numericLiteral = "[0-9]+";
var conf = {
    comments: {
        lineComment: '//',
        blockComment: ['/*', '*/']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'" },
        { open: "'''", close: "'''" }
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'", notIn: ['string', 'comment'] },
        { open: "'''", close: "'''", notIn: ['string', 'comment'] }
    ],
    autoCloseBefore: ":.,=}])' \n\t",
    indentationRules: {
        increaseIndentPattern: new RegExp('^((?!\\/\\/).)*(\\{[^}"\'`]*|\\([^)"\'`]*|\\[[^\\]"\'`]*)$'),
        decreaseIndentPattern: new RegExp('^((?!.*?\\/\\*).*\\*/)?\\s*[\\}\\]].*$')
    }
};
var language = {
    defaultToken: '',
    tokenPostfix: '.bicep',
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.square' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    symbols: /[=><!~?:&|+\-*/^%]+/,
    keywords: keywords,
    namedLiterals: namedLiterals,
    escapes: "\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\|'|\\${)",
    tokenizer: {
        root: [{ include: '@expression' }, { include: '@whitespace' }],
        stringVerbatim: [
            { regex: "(|'|'')[^']", action: { token: 'string' } },
            { regex: "'''", action: { token: 'string.quote', next: '@pop' } }
        ],
        stringLiteral: [
            { regex: "\\${", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "[^\\\\'$]+", action: { token: 'string' } },
            { regex: '@escapes', action: { token: 'string.escape' } },
            { regex: "\\\\.", action: { token: 'string.escape.invalid' } },
            { regex: "'", action: { token: 'string', next: '@pop' } }
        ],
        bracketCounting: [
            { regex: "{", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "}", action: { token: 'delimiter.bracket', next: '@pop' } },
            { include: 'expression' }
        ],
        comment: [
            { regex: "[^\\*]+", action: { token: 'comment' } },
            { regex: "\\*\\/", action: { token: 'comment', next: '@pop' } },
            { regex: "[\\/*]", action: { token: 'comment' } }
        ],
        whitespace: [
            { regex: nonCommentWs },
            { regex: "\\/\\*", action: { token: 'comment', next: '@comment' } },
            { regex: "\\/\\/.*$", action: { token: 'comment' } }
        ],
        expression: [
            { regex: "'''", action: { token: 'string.quote', next: '@stringVerbatim' } },
            { regex: "'", action: { token: 'string.quote', next: '@stringLiteral' } },
            { regex: numericLiteral, action: { token: 'number' } },
            {
                regex: identifier,
                action: {
                    cases: {
                        '@keywords': { token: 'keyword' },
                        '@namedLiterals': { token: 'keyword' },
                        '@default': { token: 'identifier' }
                    }
                }
            }
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcm9zcy1jb2RlLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2ljLWxhbmd1YWdlcy9iaWNlcC9iaWNlcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQSwrQkFBK0IsNkJBQTZCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTLFlBQVksR0FBRztBQUNqQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVMsU0FBUyxZQUFZLEdBQUc7QUFDakMsU0FBUyx3QkFBd0I7QUFDakMsU0FBUyx3QkFBd0I7QUFDakMsU0FBUyxzREFBc0Q7QUFDL0QsU0FBUztBQUNUO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsOERBQThELEdBQUc7QUFDakUsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVMsU0FBUyxZQUFZLDZCQUE2QjtBQUMzRCxTQUFTLG1EQUFtRDtBQUM1RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsYUFBYSxrQkFBa0I7QUFDcEQ7QUFDQSxnQkFBZ0IseUJBQXlCLEdBQUcseUJBQXlCO0FBQ3JFO0FBQ0EsYUFBYSxnQ0FBZ0Msa0JBQWtCLEVBQUU7QUFDakUsYUFBYSx3QkFBd0Isc0NBQXNDO0FBQzNFO0FBQ0E7QUFDQSxhQUFhLGFBQWEsWUFBWSx1REFBdUQsRUFBRTtBQUMvRixhQUFhLCtCQUErQixrQkFBa0IsRUFBRTtBQUNoRSxhQUFhLDZCQUE2Qix5QkFBeUIsRUFBRTtBQUNyRSxhQUFhLDBCQUEwQixpQ0FBaUMsRUFBRTtBQUMxRSxhQUFhLHNCQUFzQixnQ0FBZ0M7QUFDbkU7QUFDQTtBQUNBLGFBQWEsVUFBVSxZQUFZLHVEQUF1RCxFQUFFO0FBQzVGLGFBQWEsVUFBVSxZQUFZLDJDQUEyQyxFQUFFO0FBQ2hGLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYSw0QkFBNEIsbUJBQW1CLEVBQUU7QUFDOUQsYUFBYSwyQkFBMkIsaUNBQWlDLEVBQUU7QUFDM0UsYUFBYSwyQkFBMkIsbUJBQW1CO0FBQzNEO0FBQ0E7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxhQUFhLDJCQUEyQixxQ0FBcUMsRUFBRTtBQUMvRSxhQUFhLDhCQUE4QixtQkFBbUI7QUFDOUQ7QUFDQTtBQUNBLGFBQWEsd0JBQXdCLGlEQUFpRCxFQUFFO0FBQ3hGLGFBQWEsc0JBQXNCLGdEQUFnRCxFQUFFO0FBQ3JGLGFBQWEsaUNBQWlDLGtCQUFrQixFQUFFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1CQUFtQjtBQUN6RCwyQ0FBMkMsbUJBQW1CO0FBQzlELHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19iaWNlcF9iaWNlcF9qcy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG52YXIgYm91bmRlZCA9IGZ1bmN0aW9uICh0ZXh0KSB7IHJldHVybiBcIlxcXFxiXCIgKyB0ZXh0ICsgXCJcXFxcYlwiOyB9O1xyXG52YXIgaWRlbnRpZmllclN0YXJ0ID0gJ1tfYS16QS1aXSc7XHJcbnZhciBpZGVudGlmaWVyQ29udGludWUgPSAnW19hLXpBLVowLTldJztcclxudmFyIGlkZW50aWZpZXIgPSBib3VuZGVkKFwiXCIgKyBpZGVudGlmaWVyU3RhcnQgKyBpZGVudGlmaWVyQ29udGludWUgKyBcIipcIik7XHJcbnZhciBrZXl3b3JkcyA9IFtcclxuICAgICd0YXJnZXRTY29wZScsXHJcbiAgICAncmVzb3VyY2UnLFxyXG4gICAgJ21vZHVsZScsXHJcbiAgICAncGFyYW0nLFxyXG4gICAgJ3ZhcicsXHJcbiAgICAnb3V0cHV0JyxcclxuICAgICdmb3InLFxyXG4gICAgJ2luJyxcclxuICAgICdpZicsXHJcbiAgICAnZXhpc3RpbmcnXHJcbl07XHJcbnZhciBuYW1lZExpdGVyYWxzID0gWyd0cnVlJywgJ2ZhbHNlJywgJ251bGwnXTtcclxudmFyIG5vbkNvbW1lbnRXcyA9IFwiWyBcXFxcdFxcXFxyXFxcXG5dXCI7XHJcbnZhciBudW1lcmljTGl0ZXJhbCA9IFwiWzAtOV0rXCI7XHJcbmV4cG9ydCB2YXIgY29uZiA9IHtcclxuICAgIGNvbW1lbnRzOiB7XHJcbiAgICAgICAgbGluZUNvbW1lbnQ6ICcvLycsXHJcbiAgICAgICAgYmxvY2tDb21tZW50OiBbJy8qJywgJyovJ11cclxuICAgIH0sXHJcbiAgICBicmFja2V0czogW1xyXG4gICAgICAgIFsneycsICd9J10sXHJcbiAgICAgICAgWydbJywgJ10nXSxcclxuICAgICAgICBbJygnLCAnKSddXHJcbiAgICBdLFxyXG4gICAgc3Vycm91bmRpbmdQYWlyczogW1xyXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnWycsIGNsb3NlOiAnXScgfSxcclxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxyXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9LFxyXG4gICAgICAgIHsgb3BlbjogXCInJydcIiwgY2xvc2U6IFwiJycnXCIgfVxyXG4gICAgXSxcclxuICAgIGF1dG9DbG9zaW5nUGFpcnM6IFtcclxuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxyXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScgfSxcclxuICAgICAgICB7IG9wZW46IFwiJ1wiLCBjbG9zZTogXCInXCIsIG5vdEluOiBbJ3N0cmluZycsICdjb21tZW50J10gfSxcclxuICAgICAgICB7IG9wZW46IFwiJycnXCIsIGNsb3NlOiBcIicnJ1wiLCBub3RJbjogWydzdHJpbmcnLCAnY29tbWVudCddIH1cclxuICAgIF0sXHJcbiAgICBhdXRvQ2xvc2VCZWZvcmU6IFwiOi4sPX1dKScgXFxuXFx0XCIsXHJcbiAgICBpbmRlbnRhdGlvblJ1bGVzOiB7XHJcbiAgICAgICAgaW5jcmVhc2VJbmRlbnRQYXR0ZXJuOiBuZXcgUmVnRXhwKCdeKCg/IVxcXFwvXFxcXC8pLikqKFxcXFx7W159XCJcXCdgXSp8XFxcXChbXilcIlxcJ2BdKnxcXFxcW1teXFxcXF1cIlxcJ2BdKikkJyksXHJcbiAgICAgICAgZGVjcmVhc2VJbmRlbnRQYXR0ZXJuOiBuZXcgUmVnRXhwKCdeKCg/IS4qP1xcXFwvXFxcXCopLipcXFxcKi8pP1xcXFxzKltcXFxcfVxcXFxdXS4qJCcpXHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydCB2YXIgbGFuZ3VhZ2UgPSB7XHJcbiAgICBkZWZhdWx0VG9rZW46ICcnLFxyXG4gICAgdG9rZW5Qb3N0Zml4OiAnLmJpY2VwJyxcclxuICAgIGJyYWNrZXRzOiBbXHJcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScsIHRva2VuOiAnZGVsaW1pdGVyLmN1cmx5JyB9LFxyXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nLCB0b2tlbjogJ2RlbGltaXRlci5zcXVhcmUnIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScsIHRva2VuOiAnZGVsaW1pdGVyLnBhcmVudGhlc2lzJyB9XHJcbiAgICBdLFxyXG4gICAgc3ltYm9sczogL1s9Pjwhfj86JnwrXFwtKi9eJV0rLyxcclxuICAgIGtleXdvcmRzOiBrZXl3b3JkcyxcclxuICAgIG5hbWVkTGl0ZXJhbHM6IG5hbWVkTGl0ZXJhbHMsXHJcbiAgICBlc2NhcGVzOiBcIlxcXFxcXFxcKHV7WzAtOUEtRmEtZl0rfXxufHJ8dHxcXFxcXFxcXHwnfFxcXFwkeylcIixcclxuICAgIHRva2VuaXplcjoge1xyXG4gICAgICAgIHJvb3Q6IFt7IGluY2x1ZGU6ICdAZXhwcmVzc2lvbicgfSwgeyBpbmNsdWRlOiAnQHdoaXRlc3BhY2UnIH1dLFxyXG4gICAgICAgIHN0cmluZ1ZlcmJhdGltOiBbXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiKHwnfCcnKVteJ11cIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiJycnXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZy5xdW90ZScsIG5leHQ6ICdAcG9wJyB9IH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHN0cmluZ0xpdGVyYWw6IFtcclxuICAgICAgICAgICAgeyByZWdleDogXCJcXFxcJHtcIiwgYWN0aW9uOiB7IHRva2VuOiAnZGVsaW1pdGVyLmJyYWNrZXQnLCBuZXh0OiAnQGJyYWNrZXRDb3VudGluZycgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlteXFxcXFxcXFwnJF0rXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZycgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiAnQGVzY2FwZXMnLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcuZXNjYXBlJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiXFxcXFxcXFwuXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZy5lc2NhcGUuaW52YWxpZCcgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIidcIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nJywgbmV4dDogJ0Bwb3AnIH0gfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgYnJhY2tldENvdW50aW5nOiBbXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwie1wiLCBhY3Rpb246IHsgdG9rZW46ICdkZWxpbWl0ZXIuYnJhY2tldCcsIG5leHQ6ICdAYnJhY2tldENvdW50aW5nJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwifVwiLCBhY3Rpb246IHsgdG9rZW46ICdkZWxpbWl0ZXIuYnJhY2tldCcsIG5leHQ6ICdAcG9wJyB9IH0sXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ2V4cHJlc3Npb24nIH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIGNvbW1lbnQ6IFtcclxuICAgICAgICAgICAgeyByZWdleDogXCJbXlxcXFwqXStcIiwgYWN0aW9uOiB7IHRva2VuOiAnY29tbWVudCcgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFwqXFxcXC9cIiwgYWN0aW9uOiB7IHRva2VuOiAnY29tbWVudCcsIG5leHQ6ICdAcG9wJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiW1xcXFwvKl1cIiwgYWN0aW9uOiB7IHRva2VuOiAnY29tbWVudCcgfSB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICB3aGl0ZXNwYWNlOiBbXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IG5vbkNvbW1lbnRXcyB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFwvXFxcXCpcIiwgYWN0aW9uOiB7IHRva2VuOiAnY29tbWVudCcsIG5leHQ6ICdAY29tbWVudCcgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFwvXFxcXC8uKiRcIiwgYWN0aW9uOiB7IHRva2VuOiAnY29tbWVudCcgfSB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBleHByZXNzaW9uOiBbXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiJycnXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZy5xdW90ZScsIG5leHQ6ICdAc3RyaW5nVmVyYmF0aW0nIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCInXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZy5xdW90ZScsIG5leHQ6ICdAc3RyaW5nTGl0ZXJhbCcgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBudW1lcmljTGl0ZXJhbCwgYWN0aW9uOiB7IHRva2VuOiAnbnVtYmVyJyB9IH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJlZ2V4OiBpZGVudGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BrZXl3b3Jkcyc6IHsgdG9rZW46ICdrZXl3b3JkJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQG5hbWVkTGl0ZXJhbHMnOiB7IHRva2VuOiAna2V5d29yZCcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogeyB0b2tlbjogJ2lkZW50aWZpZXInIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICB9XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=