(self["webpackChunkcross_code"] = self["webpackChunkcross_code"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_perl_perl_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/perl/perl.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/perl/perl.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conf": () => (/* binding */ conf),
/* harmony export */   "language": () => (/* binding */ language)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var conf = {
    comments: {
        lineComment: '#'
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" },
        { open: '`', close: '`' }
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" },
        { open: '`', close: '`' }
    ]
};
var language = {
    defaultToken: '',
    tokenPostfix: '.perl',
    brackets: [
        { token: 'delimiter.bracket', open: '{', close: '}' },
        { token: 'delimiter.parenthesis', open: '(', close: ')' },
        { token: 'delimiter.square', open: '[', close: ']' }
    ],
    // https://learn.perl.org/docs/keywords.html
    // Perl syntax
    keywords: [
        '__DATA__',
        'else',
        'lock',
        '__END__',
        'elsif',
        'lt',
        '__FILE__',
        'eq',
        '__LINE__',
        'exp',
        'ne',
        'sub',
        '__PACKAGE__',
        'for',
        'no',
        'and',
        'foreach',
        'or',
        'unless',
        'cmp',
        'ge',
        'package',
        'until',
        'continue',
        'gt',
        'while',
        'CORE',
        'if',
        'xor',
        'do',
        'le',
        '__DIE__',
        '__WARN__'
    ],
    // Perl functions
    builtinFunctions: [
        '-A',
        'END',
        'length',
        'setpgrp',
        '-B',
        'endgrent',
        'link',
        'setpriority',
        '-b',
        'endhostent',
        'listen',
        'setprotoent',
        '-C',
        'endnetent',
        'local',
        'setpwent',
        '-c',
        'endprotoent',
        'localtime',
        'setservent',
        '-d',
        'endpwent',
        'log',
        'setsockopt',
        '-e',
        'endservent',
        'lstat',
        'shift',
        '-f',
        'eof',
        'map',
        'shmctl',
        '-g',
        'eval',
        'mkdir',
        'shmget',
        '-k',
        'exec',
        'msgctl',
        'shmread',
        '-l',
        'exists',
        'msgget',
        'shmwrite',
        '-M',
        'exit',
        'msgrcv',
        'shutdown',
        '-O',
        'fcntl',
        'msgsnd',
        'sin',
        '-o',
        'fileno',
        'my',
        'sleep',
        '-p',
        'flock',
        'next',
        'socket',
        '-r',
        'fork',
        'not',
        'socketpair',
        '-R',
        'format',
        'oct',
        'sort',
        '-S',
        'formline',
        'open',
        'splice',
        '-s',
        'getc',
        'opendir',
        'split',
        '-T',
        'getgrent',
        'ord',
        'sprintf',
        '-t',
        'getgrgid',
        'our',
        'sqrt',
        '-u',
        'getgrnam',
        'pack',
        'srand',
        '-w',
        'gethostbyaddr',
        'pipe',
        'stat',
        '-W',
        'gethostbyname',
        'pop',
        'state',
        '-X',
        'gethostent',
        'pos',
        'study',
        '-x',
        'getlogin',
        'print',
        'substr',
        '-z',
        'getnetbyaddr',
        'printf',
        'symlink',
        'abs',
        'getnetbyname',
        'prototype',
        'syscall',
        'accept',
        'getnetent',
        'push',
        'sysopen',
        'alarm',
        'getpeername',
        'quotemeta',
        'sysread',
        'atan2',
        'getpgrp',
        'rand',
        'sysseek',
        'AUTOLOAD',
        'getppid',
        'read',
        'system',
        'BEGIN',
        'getpriority',
        'readdir',
        'syswrite',
        'bind',
        'getprotobyname',
        'readline',
        'tell',
        'binmode',
        'getprotobynumber',
        'readlink',
        'telldir',
        'bless',
        'getprotoent',
        'readpipe',
        'tie',
        'break',
        'getpwent',
        'recv',
        'tied',
        'caller',
        'getpwnam',
        'redo',
        'time',
        'chdir',
        'getpwuid',
        'ref',
        'times',
        'CHECK',
        'getservbyname',
        'rename',
        'truncate',
        'chmod',
        'getservbyport',
        'require',
        'uc',
        'chomp',
        'getservent',
        'reset',
        'ucfirst',
        'chop',
        'getsockname',
        'return',
        'umask',
        'chown',
        'getsockopt',
        'reverse',
        'undef',
        'chr',
        'glob',
        'rewinddir',
        'UNITCHECK',
        'chroot',
        'gmtime',
        'rindex',
        'unlink',
        'close',
        'goto',
        'rmdir',
        'unpack',
        'closedir',
        'grep',
        'say',
        'unshift',
        'connect',
        'hex',
        'scalar',
        'untie',
        'cos',
        'index',
        'seek',
        'use',
        'crypt',
        'INIT',
        'seekdir',
        'utime',
        'dbmclose',
        'int',
        'select',
        'values',
        'dbmopen',
        'ioctl',
        'semctl',
        'vec',
        'defined',
        'join',
        'semget',
        'wait',
        'delete',
        'keys',
        'semop',
        'waitpid',
        'DESTROY',
        'kill',
        'send',
        'wantarray',
        'die',
        'last',
        'setgrent',
        'warn',
        'dump',
        'lc',
        'sethostent',
        'write',
        'each',
        'lcfirst',
        'setnetent'
    ],
    // File handlers
    builtinFileHandlers: ['ARGV', 'STDERR', 'STDOUT', 'ARGVOUT', 'STDIN', 'ENV'],
    // Perl variables
    builtinVariables: [
        '$!',
        '$^RE_TRIE_MAXBUF',
        '$LAST_REGEXP_CODE_RESULT',
        '$"',
        '$^S',
        '$LIST_SEPARATOR',
        '$#',
        '$^T',
        '$MATCH',
        '$$',
        '$^TAINT',
        '$MULTILINE_MATCHING',
        '$%',
        '$^UNICODE',
        '$NR',
        '$&',
        '$^UTF8LOCALE',
        '$OFMT',
        "$'",
        '$^V',
        '$OFS',
        '$(',
        '$^W',
        '$ORS',
        '$)',
        '$^WARNING_BITS',
        '$OS_ERROR',
        '$*',
        '$^WIDE_SYSTEM_CALLS',
        '$OSNAME',
        '$+',
        '$^X',
        '$OUTPUT_AUTO_FLUSH',
        '$,',
        '$_',
        '$OUTPUT_FIELD_SEPARATOR',
        '$-',
        '$`',
        '$OUTPUT_RECORD_SEPARATOR',
        '$.',
        '$a',
        '$PERL_VERSION',
        '$/',
        '$ACCUMULATOR',
        '$PERLDB',
        '$0',
        '$ARG',
        '$PID',
        '$:',
        '$ARGV',
        '$POSTMATCH',
        '$;',
        '$b',
        '$PREMATCH',
        '$<',
        '$BASETIME',
        '$PROCESS_ID',
        '$=',
        '$CHILD_ERROR',
        '$PROGRAM_NAME',
        '$>',
        '$COMPILING',
        '$REAL_GROUP_ID',
        '$?',
        '$DEBUGGING',
        '$REAL_USER_ID',
        '$@',
        '$EFFECTIVE_GROUP_ID',
        '$RS',
        '$[',
        '$EFFECTIVE_USER_ID',
        '$SUBSCRIPT_SEPARATOR',
        '$\\',
        '$EGID',
        '$SUBSEP',
        '$]',
        '$ERRNO',
        '$SYSTEM_FD_MAX',
        '$^',
        '$EUID',
        '$UID',
        '$^A',
        '$EVAL_ERROR',
        '$WARNING',
        '$^C',
        '$EXCEPTIONS_BEING_CAUGHT',
        '$|',
        '$^CHILD_ERROR_NATIVE',
        '$EXECUTABLE_NAME',
        '$~',
        '$^D',
        '$EXTENDED_OS_ERROR',
        '%!',
        '$^E',
        '$FORMAT_FORMFEED',
        '%^H',
        '$^ENCODING',
        '$FORMAT_LINE_BREAK_CHARACTERS',
        '%ENV',
        '$^F',
        '$FORMAT_LINES_LEFT',
        '%INC',
        '$^H',
        '$FORMAT_LINES_PER_PAGE',
        '%OVERLOAD',
        '$^I',
        '$FORMAT_NAME',
        '%SIG',
        '$^L',
        '$FORMAT_PAGE_NUMBER',
        '@+',
        '$^M',
        '$FORMAT_TOP_NAME',
        '@-',
        '$^N',
        '$GID',
        '@_',
        '$^O',
        '$INPLACE_EDIT',
        '@ARGV',
        '$^OPEN',
        '$INPUT_LINE_NUMBER',
        '@INC',
        '$^P',
        '$INPUT_RECORD_SEPARATOR',
        '@LAST_MATCH_START',
        '$^R',
        '$LAST_MATCH_END',
        '$^RE_DEBUG_FLAGS',
        '$LAST_PAREN_MATCH'
    ],
    // operators
    symbols: /[:+\-\^*$&%@=<>!?|\/~\.]/,
    quoteLikeOps: ['qr', 'm', 's', 'q', 'qq', 'qx', 'qw', 'tr', 'y'],
    escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
    // The main tokenizer for our languages
    tokenizer: {
        root: [
            { include: '@whitespace' },
            [
                /[a-zA-Z\-_][\w\-_]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtinFunctions': 'type.identifier',
                        '@builtinFileHandlers': 'variable.predefined',
                        '@quoteLikeOps': {
                            token: '@rematch',
                            next: 'quotedConstructs'
                        },
                        '@default': ''
                    }
                }
            ],
            // Perl variables
            [
                /[\$@%][*@#?\+\-\$!\w\\\^><~:;\.]+/,
                {
                    cases: {
                        '@builtinVariables': 'variable.predefined',
                        '@default': 'variable'
                    }
                }
            ],
            { include: '@strings' },
            { include: '@dblStrings' },
            // Perl Doc
            { include: '@perldoc' },
            // Here Doc
            { include: '@heredoc' },
            [/[{}\[\]()]/, '@brackets'],
            // RegExp
            [/[\/](?:(?:\[(?:\\]|[^\]])+\])|(?:\\\/|[^\]\/]))*[\/]\w*\s*(?=[).,;]|$)/, 'regexp'],
            [/@symbols/, 'operators'],
            { include: '@numbers' },
            [/[,;]/, 'delimiter']
        ],
        whitespace: [
            [/\s+/, 'white'],
            [/(^#!.*$)/, 'metatag'],
            [/(^#.*$)/, 'comment']
        ],
        numbers: [
            [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],
            [/\d+/, 'number']
        ],
        // Single quote string
        strings: [[/'/, 'string', '@stringBody']],
        stringBody: [
            [/'/, 'string', '@popall'],
            [/\\'/, 'string.escape'],
            [/./, 'string']
        ],
        // Double quote string
        dblStrings: [[/"/, 'string', '@dblStringBody']],
        dblStringBody: [
            [/"/, 'string', '@popall'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            { include: '@variables' },
            [/./, 'string']
        ],
        // Quoted constructs
        // Percent strings in Ruby are similar to quote-like operators in Perl.
        // This is adapted from pstrings in ../ruby/ruby.ts.
        quotedConstructs: [
            [/(q|qw|tr|y)\s*\(/, { token: 'string.delim', switchTo: '@qstring.(.)' }],
            [/(q|qw|tr|y)\s*\[/, { token: 'string.delim', switchTo: '@qstring.[.]' }],
            [/(q|qw|tr|y)\s*\{/, { token: 'string.delim', switchTo: '@qstring.{.}' }],
            [/(q|qw|tr|y)\s*</, { token: 'string.delim', switchTo: '@qstring.<.>' }],
            [/(q|qw|tr|y)#/, { token: 'string.delim', switchTo: '@qstring.#.#' }],
            [
                /(q|qw|tr|y)\s*([^A-Za-z0-9#\s])/,
                { token: 'string.delim', switchTo: '@qstring.$2.$2' }
            ],
            [/(q|qw|tr|y)\s+(\w)/, { token: 'string.delim', switchTo: '@qstring.$2.$2' }],
            [/(qr|m|s)\s*\(/, { token: 'regexp.delim', switchTo: '@qregexp.(.)' }],
            [/(qr|m|s)\s*\[/, { token: 'regexp.delim', switchTo: '@qregexp.[.]' }],
            [/(qr|m|s)\s*\{/, { token: 'regexp.delim', switchTo: '@qregexp.{.}' }],
            [/(qr|m|s)\s*</, { token: 'regexp.delim', switchTo: '@qregexp.<.>' }],
            [/(qr|m|s)#/, { token: 'regexp.delim', switchTo: '@qregexp.#.#' }],
            [
                /(qr|m|s)\s*([^A-Za-z0-9_#\s])/,
                { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }
            ],
            [/(qr|m|s)\s+(\w)/, { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }],
            [/(qq|qx)\s*\(/, { token: 'string.delim', switchTo: '@qqstring.(.)' }],
            [/(qq|qx)\s*\[/, { token: 'string.delim', switchTo: '@qqstring.[.]' }],
            [/(qq|qx)\s*\{/, { token: 'string.delim', switchTo: '@qqstring.{.}' }],
            [/(qq|qx)\s*</, { token: 'string.delim', switchTo: '@qqstring.<.>' }],
            [/(qq|qx)#/, { token: 'string.delim', switchTo: '@qqstring.#.#' }],
            [/(qq|qx)\s*([^A-Za-z0-9#\s])/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }],
            [/(qq|qx)\s+(\w)/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }]
        ],
        // Non-expanded quoted string
        // qstring<open>.<close>
        //  open = open delimiter
        //  close = close delimiter
        qstring: [
            [/\\./, 'string.escape'],
            [
                /./,
                {
                    cases: {
                        '$#==$S3': { token: 'string.delim', next: '@pop' },
                        '$#==$S2': { token: 'string.delim', next: '@push' },
                        '@default': 'string'
                    }
                }
            ]
        ],
        // Quoted regexp
        // qregexp.<open>.<close>
        //  open = open delimiter
        //  close = close delimiter
        qregexp: [
            { include: '@variables' },
            [/\\./, 'regexp.escape'],
            [
                /./,
                {
                    cases: {
                        '$#==$S3': {
                            token: 'regexp.delim',
                            next: '@regexpModifiers'
                        },
                        '$#==$S2': { token: 'regexp.delim', next: '@push' },
                        '@default': 'regexp'
                    }
                }
            ]
        ],
        regexpModifiers: [[/[msixpodualngcer]+/, { token: 'regexp.modifier', next: '@popall' }]],
        // Expanded quoted string
        // qqstring.<open>.<close>
        //  open = open delimiter
        //  close = close delimiter
        qqstring: [{ include: '@variables' }, { include: '@qstring' }],
        heredoc: [
            [
                /<<\s*['"`]?([\w\-]+)['"`]?/,
                { token: 'string.heredoc.delimiter', next: '@heredocBody.$1' }
            ]
        ],
        heredocBody: [
            [
                /^([\w\-]+)$/,
                {
                    cases: {
                        '$1==$S2': [
                            {
                                token: 'string.heredoc.delimiter',
                                next: '@popall'
                            }
                        ],
                        '@default': 'string.heredoc'
                    }
                }
            ],
            [/./, 'string.heredoc']
        ],
        perldoc: [[/^=\w/, 'comment.doc', '@perldocBody']],
        perldocBody: [
            [/^=cut\b/, 'type.identifier', '@popall'],
            [/./, 'comment.doc']
        ],
        variables: [
            [/\$\w+/, 'variable'],
            [/@\w+/, 'variable'],
            [/%\w+/, 'variable'] // key/value
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcm9zcy1jb2RlLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2ljLWxhbmd1YWdlcy9wZXJsL3BlcmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsU0FBUyxZQUFZLEdBQUc7QUFDakMsU0FBUyx3QkFBd0I7QUFDakMsU0FBUyx3QkFBd0I7QUFDakMsU0FBUyx3QkFBd0I7QUFDakMsU0FBUyx3QkFBd0I7QUFDakMsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTLFNBQVMsWUFBWSxHQUFHO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVM7QUFDVDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTLHFDQUFxQyxZQUFZLEdBQUc7QUFDN0QsU0FBUyx3REFBd0Q7QUFDakUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLElBQUksY0FBYyxFQUFFLGNBQWMsRUFBRTtBQUNsRjtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlCQUF5QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxhQUFhLHlCQUF5QjtBQUN0QztBQUNBLGFBQWEsc0JBQXNCO0FBQ25DO0FBQ0EsYUFBYSxzQkFBc0I7QUFDbkMsaUJBQWlCO0FBQ2pCO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0EsYUFBYSxzQkFBc0I7QUFDbkMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxrREFBa0Q7QUFDcEYsa0NBQWtDLGtEQUFrRDtBQUNwRiw4QkFBOEIsSUFBSSw2Q0FBNkMsRUFBRSxHQUFHO0FBQ3BGLGlDQUFpQyxrREFBa0Q7QUFDbkYsOEJBQThCLGtEQUFrRDtBQUNoRjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esb0NBQW9DLG9EQUFvRDtBQUN4RiwrQkFBK0Isa0RBQWtEO0FBQ2pGLCtCQUErQixrREFBa0Q7QUFDakYsMkJBQTJCLElBQUksNkNBQTZDLEVBQUUsR0FBRztBQUNqRiw4QkFBOEIsa0RBQWtEO0FBQ2hGLDJCQUEyQixrREFBa0Q7QUFDN0U7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlDQUFpQyxvREFBb0Q7QUFDckYsOEJBQThCLG1EQUFtRDtBQUNqRiw4QkFBOEIsbURBQW1EO0FBQ2pGLDBCQUEwQixJQUFJLDhDQUE4QyxFQUFFLEdBQUc7QUFDakYsNkJBQTZCLG1EQUFtRDtBQUNoRiwwQkFBMEIsbURBQW1EO0FBQzdFLDZDQUE2QyxxREFBcUQ7QUFDbEcsZ0NBQWdDLHFEQUFxRDtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHNDQUFzQztBQUMxRSxvQ0FBb0MsdUNBQXVDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx3QkFBd0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixvQ0FBb0MsdUNBQXVDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsNENBQTRDO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QixHQUFHLHNCQUFzQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfbW9uYWNvLWVkaXRvcl9lc21fdnNfYmFzaWMtbGFuZ3VhZ2VzX3BlcmxfcGVybF9qcy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZXhwb3J0IHZhciBjb25mID0ge1xyXG4gICAgY29tbWVudHM6IHtcclxuICAgICAgICBsaW5lQ29tbWVudDogJyMnXHJcbiAgICB9LFxyXG4gICAgYnJhY2tldHM6IFtcclxuICAgICAgICBbJ3snLCAnfSddLFxyXG4gICAgICAgIFsnWycsICddJ10sXHJcbiAgICAgICAgWycoJywgJyknXVxyXG4gICAgXSxcclxuICAgIGF1dG9DbG9zaW5nUGFpcnM6IFtcclxuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxyXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScgfSxcclxuICAgICAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXHJcbiAgICAgICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnYCcsIGNsb3NlOiAnYCcgfVxyXG4gICAgXSxcclxuICAgIHN1cnJvdW5kaW5nUGFpcnM6IFtcclxuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxyXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScgfSxcclxuICAgICAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXHJcbiAgICAgICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnYCcsIGNsb3NlOiAnYCcgfVxyXG4gICAgXVxyXG59O1xyXG5leHBvcnQgdmFyIGxhbmd1YWdlID0ge1xyXG4gICAgZGVmYXVsdFRva2VuOiAnJyxcclxuICAgIHRva2VuUG9zdGZpeDogJy5wZXJsJyxcclxuICAgIGJyYWNrZXRzOiBbXHJcbiAgICAgICAgeyB0b2tlbjogJ2RlbGltaXRlci5icmFja2V0Jywgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXHJcbiAgICAgICAgeyB0b2tlbjogJ2RlbGltaXRlci5wYXJlbnRoZXNpcycsIG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxyXG4gICAgICAgIHsgdG9rZW46ICdkZWxpbWl0ZXIuc3F1YXJlJywgb3BlbjogJ1snLCBjbG9zZTogJ10nIH1cclxuICAgIF0sXHJcbiAgICAvLyBodHRwczovL2xlYXJuLnBlcmwub3JnL2RvY3Mva2V5d29yZHMuaHRtbFxyXG4gICAgLy8gUGVybCBzeW50YXhcclxuICAgIGtleXdvcmRzOiBbXHJcbiAgICAgICAgJ19fREFUQV9fJyxcclxuICAgICAgICAnZWxzZScsXHJcbiAgICAgICAgJ2xvY2snLFxyXG4gICAgICAgICdfX0VORF9fJyxcclxuICAgICAgICAnZWxzaWYnLFxyXG4gICAgICAgICdsdCcsXHJcbiAgICAgICAgJ19fRklMRV9fJyxcclxuICAgICAgICAnZXEnLFxyXG4gICAgICAgICdfX0xJTkVfXycsXHJcbiAgICAgICAgJ2V4cCcsXHJcbiAgICAgICAgJ25lJyxcclxuICAgICAgICAnc3ViJyxcclxuICAgICAgICAnX19QQUNLQUdFX18nLFxyXG4gICAgICAgICdmb3InLFxyXG4gICAgICAgICdubycsXHJcbiAgICAgICAgJ2FuZCcsXHJcbiAgICAgICAgJ2ZvcmVhY2gnLFxyXG4gICAgICAgICdvcicsXHJcbiAgICAgICAgJ3VubGVzcycsXHJcbiAgICAgICAgJ2NtcCcsXHJcbiAgICAgICAgJ2dlJyxcclxuICAgICAgICAncGFja2FnZScsXHJcbiAgICAgICAgJ3VudGlsJyxcclxuICAgICAgICAnY29udGludWUnLFxyXG4gICAgICAgICdndCcsXHJcbiAgICAgICAgJ3doaWxlJyxcclxuICAgICAgICAnQ09SRScsXHJcbiAgICAgICAgJ2lmJyxcclxuICAgICAgICAneG9yJyxcclxuICAgICAgICAnZG8nLFxyXG4gICAgICAgICdsZScsXHJcbiAgICAgICAgJ19fRElFX18nLFxyXG4gICAgICAgICdfX1dBUk5fXydcclxuICAgIF0sXHJcbiAgICAvLyBQZXJsIGZ1bmN0aW9uc1xyXG4gICAgYnVpbHRpbkZ1bmN0aW9uczogW1xyXG4gICAgICAgICctQScsXHJcbiAgICAgICAgJ0VORCcsXHJcbiAgICAgICAgJ2xlbmd0aCcsXHJcbiAgICAgICAgJ3NldHBncnAnLFxyXG4gICAgICAgICctQicsXHJcbiAgICAgICAgJ2VuZGdyZW50JyxcclxuICAgICAgICAnbGluaycsXHJcbiAgICAgICAgJ3NldHByaW9yaXR5JyxcclxuICAgICAgICAnLWInLFxyXG4gICAgICAgICdlbmRob3N0ZW50JyxcclxuICAgICAgICAnbGlzdGVuJyxcclxuICAgICAgICAnc2V0cHJvdG9lbnQnLFxyXG4gICAgICAgICctQycsXHJcbiAgICAgICAgJ2VuZG5ldGVudCcsXHJcbiAgICAgICAgJ2xvY2FsJyxcclxuICAgICAgICAnc2V0cHdlbnQnLFxyXG4gICAgICAgICctYycsXHJcbiAgICAgICAgJ2VuZHByb3RvZW50JyxcclxuICAgICAgICAnbG9jYWx0aW1lJyxcclxuICAgICAgICAnc2V0c2VydmVudCcsXHJcbiAgICAgICAgJy1kJyxcclxuICAgICAgICAnZW5kcHdlbnQnLFxyXG4gICAgICAgICdsb2cnLFxyXG4gICAgICAgICdzZXRzb2Nrb3B0JyxcclxuICAgICAgICAnLWUnLFxyXG4gICAgICAgICdlbmRzZXJ2ZW50JyxcclxuICAgICAgICAnbHN0YXQnLFxyXG4gICAgICAgICdzaGlmdCcsXHJcbiAgICAgICAgJy1mJyxcclxuICAgICAgICAnZW9mJyxcclxuICAgICAgICAnbWFwJyxcclxuICAgICAgICAnc2htY3RsJyxcclxuICAgICAgICAnLWcnLFxyXG4gICAgICAgICdldmFsJyxcclxuICAgICAgICAnbWtkaXInLFxyXG4gICAgICAgICdzaG1nZXQnLFxyXG4gICAgICAgICctaycsXHJcbiAgICAgICAgJ2V4ZWMnLFxyXG4gICAgICAgICdtc2djdGwnLFxyXG4gICAgICAgICdzaG1yZWFkJyxcclxuICAgICAgICAnLWwnLFxyXG4gICAgICAgICdleGlzdHMnLFxyXG4gICAgICAgICdtc2dnZXQnLFxyXG4gICAgICAgICdzaG13cml0ZScsXHJcbiAgICAgICAgJy1NJyxcclxuICAgICAgICAnZXhpdCcsXHJcbiAgICAgICAgJ21zZ3JjdicsXHJcbiAgICAgICAgJ3NodXRkb3duJyxcclxuICAgICAgICAnLU8nLFxyXG4gICAgICAgICdmY250bCcsXHJcbiAgICAgICAgJ21zZ3NuZCcsXHJcbiAgICAgICAgJ3NpbicsXHJcbiAgICAgICAgJy1vJyxcclxuICAgICAgICAnZmlsZW5vJyxcclxuICAgICAgICAnbXknLFxyXG4gICAgICAgICdzbGVlcCcsXHJcbiAgICAgICAgJy1wJyxcclxuICAgICAgICAnZmxvY2snLFxyXG4gICAgICAgICduZXh0JyxcclxuICAgICAgICAnc29ja2V0JyxcclxuICAgICAgICAnLXInLFxyXG4gICAgICAgICdmb3JrJyxcclxuICAgICAgICAnbm90JyxcclxuICAgICAgICAnc29ja2V0cGFpcicsXHJcbiAgICAgICAgJy1SJyxcclxuICAgICAgICAnZm9ybWF0JyxcclxuICAgICAgICAnb2N0JyxcclxuICAgICAgICAnc29ydCcsXHJcbiAgICAgICAgJy1TJyxcclxuICAgICAgICAnZm9ybWxpbmUnLFxyXG4gICAgICAgICdvcGVuJyxcclxuICAgICAgICAnc3BsaWNlJyxcclxuICAgICAgICAnLXMnLFxyXG4gICAgICAgICdnZXRjJyxcclxuICAgICAgICAnb3BlbmRpcicsXHJcbiAgICAgICAgJ3NwbGl0JyxcclxuICAgICAgICAnLVQnLFxyXG4gICAgICAgICdnZXRncmVudCcsXHJcbiAgICAgICAgJ29yZCcsXHJcbiAgICAgICAgJ3NwcmludGYnLFxyXG4gICAgICAgICctdCcsXHJcbiAgICAgICAgJ2dldGdyZ2lkJyxcclxuICAgICAgICAnb3VyJyxcclxuICAgICAgICAnc3FydCcsXHJcbiAgICAgICAgJy11JyxcclxuICAgICAgICAnZ2V0Z3JuYW0nLFxyXG4gICAgICAgICdwYWNrJyxcclxuICAgICAgICAnc3JhbmQnLFxyXG4gICAgICAgICctdycsXHJcbiAgICAgICAgJ2dldGhvc3RieWFkZHInLFxyXG4gICAgICAgICdwaXBlJyxcclxuICAgICAgICAnc3RhdCcsXHJcbiAgICAgICAgJy1XJyxcclxuICAgICAgICAnZ2V0aG9zdGJ5bmFtZScsXHJcbiAgICAgICAgJ3BvcCcsXHJcbiAgICAgICAgJ3N0YXRlJyxcclxuICAgICAgICAnLVgnLFxyXG4gICAgICAgICdnZXRob3N0ZW50JyxcclxuICAgICAgICAncG9zJyxcclxuICAgICAgICAnc3R1ZHknLFxyXG4gICAgICAgICcteCcsXHJcbiAgICAgICAgJ2dldGxvZ2luJyxcclxuICAgICAgICAncHJpbnQnLFxyXG4gICAgICAgICdzdWJzdHInLFxyXG4gICAgICAgICcteicsXHJcbiAgICAgICAgJ2dldG5ldGJ5YWRkcicsXHJcbiAgICAgICAgJ3ByaW50ZicsXHJcbiAgICAgICAgJ3N5bWxpbmsnLFxyXG4gICAgICAgICdhYnMnLFxyXG4gICAgICAgICdnZXRuZXRieW5hbWUnLFxyXG4gICAgICAgICdwcm90b3R5cGUnLFxyXG4gICAgICAgICdzeXNjYWxsJyxcclxuICAgICAgICAnYWNjZXB0JyxcclxuICAgICAgICAnZ2V0bmV0ZW50JyxcclxuICAgICAgICAncHVzaCcsXHJcbiAgICAgICAgJ3N5c29wZW4nLFxyXG4gICAgICAgICdhbGFybScsXHJcbiAgICAgICAgJ2dldHBlZXJuYW1lJyxcclxuICAgICAgICAncXVvdGVtZXRhJyxcclxuICAgICAgICAnc3lzcmVhZCcsXHJcbiAgICAgICAgJ2F0YW4yJyxcclxuICAgICAgICAnZ2V0cGdycCcsXHJcbiAgICAgICAgJ3JhbmQnLFxyXG4gICAgICAgICdzeXNzZWVrJyxcclxuICAgICAgICAnQVVUT0xPQUQnLFxyXG4gICAgICAgICdnZXRwcGlkJyxcclxuICAgICAgICAncmVhZCcsXHJcbiAgICAgICAgJ3N5c3RlbScsXHJcbiAgICAgICAgJ0JFR0lOJyxcclxuICAgICAgICAnZ2V0cHJpb3JpdHknLFxyXG4gICAgICAgICdyZWFkZGlyJyxcclxuICAgICAgICAnc3lzd3JpdGUnLFxyXG4gICAgICAgICdiaW5kJyxcclxuICAgICAgICAnZ2V0cHJvdG9ieW5hbWUnLFxyXG4gICAgICAgICdyZWFkbGluZScsXHJcbiAgICAgICAgJ3RlbGwnLFxyXG4gICAgICAgICdiaW5tb2RlJyxcclxuICAgICAgICAnZ2V0cHJvdG9ieW51bWJlcicsXHJcbiAgICAgICAgJ3JlYWRsaW5rJyxcclxuICAgICAgICAndGVsbGRpcicsXHJcbiAgICAgICAgJ2JsZXNzJyxcclxuICAgICAgICAnZ2V0cHJvdG9lbnQnLFxyXG4gICAgICAgICdyZWFkcGlwZScsXHJcbiAgICAgICAgJ3RpZScsXHJcbiAgICAgICAgJ2JyZWFrJyxcclxuICAgICAgICAnZ2V0cHdlbnQnLFxyXG4gICAgICAgICdyZWN2JyxcclxuICAgICAgICAndGllZCcsXHJcbiAgICAgICAgJ2NhbGxlcicsXHJcbiAgICAgICAgJ2dldHB3bmFtJyxcclxuICAgICAgICAncmVkbycsXHJcbiAgICAgICAgJ3RpbWUnLFxyXG4gICAgICAgICdjaGRpcicsXHJcbiAgICAgICAgJ2dldHB3dWlkJyxcclxuICAgICAgICAncmVmJyxcclxuICAgICAgICAndGltZXMnLFxyXG4gICAgICAgICdDSEVDSycsXHJcbiAgICAgICAgJ2dldHNlcnZieW5hbWUnLFxyXG4gICAgICAgICdyZW5hbWUnLFxyXG4gICAgICAgICd0cnVuY2F0ZScsXHJcbiAgICAgICAgJ2NobW9kJyxcclxuICAgICAgICAnZ2V0c2VydmJ5cG9ydCcsXHJcbiAgICAgICAgJ3JlcXVpcmUnLFxyXG4gICAgICAgICd1YycsXHJcbiAgICAgICAgJ2Nob21wJyxcclxuICAgICAgICAnZ2V0c2VydmVudCcsXHJcbiAgICAgICAgJ3Jlc2V0JyxcclxuICAgICAgICAndWNmaXJzdCcsXHJcbiAgICAgICAgJ2Nob3AnLFxyXG4gICAgICAgICdnZXRzb2NrbmFtZScsXHJcbiAgICAgICAgJ3JldHVybicsXHJcbiAgICAgICAgJ3VtYXNrJyxcclxuICAgICAgICAnY2hvd24nLFxyXG4gICAgICAgICdnZXRzb2Nrb3B0JyxcclxuICAgICAgICAncmV2ZXJzZScsXHJcbiAgICAgICAgJ3VuZGVmJyxcclxuICAgICAgICAnY2hyJyxcclxuICAgICAgICAnZ2xvYicsXHJcbiAgICAgICAgJ3Jld2luZGRpcicsXHJcbiAgICAgICAgJ1VOSVRDSEVDSycsXHJcbiAgICAgICAgJ2Nocm9vdCcsXHJcbiAgICAgICAgJ2dtdGltZScsXHJcbiAgICAgICAgJ3JpbmRleCcsXHJcbiAgICAgICAgJ3VubGluaycsXHJcbiAgICAgICAgJ2Nsb3NlJyxcclxuICAgICAgICAnZ290bycsXHJcbiAgICAgICAgJ3JtZGlyJyxcclxuICAgICAgICAndW5wYWNrJyxcclxuICAgICAgICAnY2xvc2VkaXInLFxyXG4gICAgICAgICdncmVwJyxcclxuICAgICAgICAnc2F5JyxcclxuICAgICAgICAndW5zaGlmdCcsXHJcbiAgICAgICAgJ2Nvbm5lY3QnLFxyXG4gICAgICAgICdoZXgnLFxyXG4gICAgICAgICdzY2FsYXInLFxyXG4gICAgICAgICd1bnRpZScsXHJcbiAgICAgICAgJ2NvcycsXHJcbiAgICAgICAgJ2luZGV4JyxcclxuICAgICAgICAnc2VlaycsXHJcbiAgICAgICAgJ3VzZScsXHJcbiAgICAgICAgJ2NyeXB0JyxcclxuICAgICAgICAnSU5JVCcsXHJcbiAgICAgICAgJ3NlZWtkaXInLFxyXG4gICAgICAgICd1dGltZScsXHJcbiAgICAgICAgJ2RibWNsb3NlJyxcclxuICAgICAgICAnaW50JyxcclxuICAgICAgICAnc2VsZWN0JyxcclxuICAgICAgICAndmFsdWVzJyxcclxuICAgICAgICAnZGJtb3BlbicsXHJcbiAgICAgICAgJ2lvY3RsJyxcclxuICAgICAgICAnc2VtY3RsJyxcclxuICAgICAgICAndmVjJyxcclxuICAgICAgICAnZGVmaW5lZCcsXHJcbiAgICAgICAgJ2pvaW4nLFxyXG4gICAgICAgICdzZW1nZXQnLFxyXG4gICAgICAgICd3YWl0JyxcclxuICAgICAgICAnZGVsZXRlJyxcclxuICAgICAgICAna2V5cycsXHJcbiAgICAgICAgJ3NlbW9wJyxcclxuICAgICAgICAnd2FpdHBpZCcsXHJcbiAgICAgICAgJ0RFU1RST1knLFxyXG4gICAgICAgICdraWxsJyxcclxuICAgICAgICAnc2VuZCcsXHJcbiAgICAgICAgJ3dhbnRhcnJheScsXHJcbiAgICAgICAgJ2RpZScsXHJcbiAgICAgICAgJ2xhc3QnLFxyXG4gICAgICAgICdzZXRncmVudCcsXHJcbiAgICAgICAgJ3dhcm4nLFxyXG4gICAgICAgICdkdW1wJyxcclxuICAgICAgICAnbGMnLFxyXG4gICAgICAgICdzZXRob3N0ZW50JyxcclxuICAgICAgICAnd3JpdGUnLFxyXG4gICAgICAgICdlYWNoJyxcclxuICAgICAgICAnbGNmaXJzdCcsXHJcbiAgICAgICAgJ3NldG5ldGVudCdcclxuICAgIF0sXHJcbiAgICAvLyBGaWxlIGhhbmRsZXJzXHJcbiAgICBidWlsdGluRmlsZUhhbmRsZXJzOiBbJ0FSR1YnLCAnU1RERVJSJywgJ1NURE9VVCcsICdBUkdWT1VUJywgJ1NURElOJywgJ0VOViddLFxyXG4gICAgLy8gUGVybCB2YXJpYWJsZXNcclxuICAgIGJ1aWx0aW5WYXJpYWJsZXM6IFtcclxuICAgICAgICAnJCEnLFxyXG4gICAgICAgICckXlJFX1RSSUVfTUFYQlVGJyxcclxuICAgICAgICAnJExBU1RfUkVHRVhQX0NPREVfUkVTVUxUJyxcclxuICAgICAgICAnJFwiJyxcclxuICAgICAgICAnJF5TJyxcclxuICAgICAgICAnJExJU1RfU0VQQVJBVE9SJyxcclxuICAgICAgICAnJCMnLFxyXG4gICAgICAgICckXlQnLFxyXG4gICAgICAgICckTUFUQ0gnLFxyXG4gICAgICAgICckJCcsXHJcbiAgICAgICAgJyReVEFJTlQnLFxyXG4gICAgICAgICckTVVMVElMSU5FX01BVENISU5HJyxcclxuICAgICAgICAnJCUnLFxyXG4gICAgICAgICckXlVOSUNPREUnLFxyXG4gICAgICAgICckTlInLFxyXG4gICAgICAgICckJicsXHJcbiAgICAgICAgJyReVVRGOExPQ0FMRScsXHJcbiAgICAgICAgJyRPRk1UJyxcclxuICAgICAgICBcIiQnXCIsXHJcbiAgICAgICAgJyReVicsXHJcbiAgICAgICAgJyRPRlMnLFxyXG4gICAgICAgICckKCcsXHJcbiAgICAgICAgJyReVycsXHJcbiAgICAgICAgJyRPUlMnLFxyXG4gICAgICAgICckKScsXHJcbiAgICAgICAgJyReV0FSTklOR19CSVRTJyxcclxuICAgICAgICAnJE9TX0VSUk9SJyxcclxuICAgICAgICAnJConLFxyXG4gICAgICAgICckXldJREVfU1lTVEVNX0NBTExTJyxcclxuICAgICAgICAnJE9TTkFNRScsXHJcbiAgICAgICAgJyQrJyxcclxuICAgICAgICAnJF5YJyxcclxuICAgICAgICAnJE9VVFBVVF9BVVRPX0ZMVVNIJyxcclxuICAgICAgICAnJCwnLFxyXG4gICAgICAgICckXycsXHJcbiAgICAgICAgJyRPVVRQVVRfRklFTERfU0VQQVJBVE9SJyxcclxuICAgICAgICAnJC0nLFxyXG4gICAgICAgICckYCcsXHJcbiAgICAgICAgJyRPVVRQVVRfUkVDT1JEX1NFUEFSQVRPUicsXHJcbiAgICAgICAgJyQuJyxcclxuICAgICAgICAnJGEnLFxyXG4gICAgICAgICckUEVSTF9WRVJTSU9OJyxcclxuICAgICAgICAnJC8nLFxyXG4gICAgICAgICckQUNDVU1VTEFUT1InLFxyXG4gICAgICAgICckUEVSTERCJyxcclxuICAgICAgICAnJDAnLFxyXG4gICAgICAgICckQVJHJyxcclxuICAgICAgICAnJFBJRCcsXHJcbiAgICAgICAgJyQ6JyxcclxuICAgICAgICAnJEFSR1YnLFxyXG4gICAgICAgICckUE9TVE1BVENIJyxcclxuICAgICAgICAnJDsnLFxyXG4gICAgICAgICckYicsXHJcbiAgICAgICAgJyRQUkVNQVRDSCcsXHJcbiAgICAgICAgJyQ8JyxcclxuICAgICAgICAnJEJBU0VUSU1FJyxcclxuICAgICAgICAnJFBST0NFU1NfSUQnLFxyXG4gICAgICAgICckPScsXHJcbiAgICAgICAgJyRDSElMRF9FUlJPUicsXHJcbiAgICAgICAgJyRQUk9HUkFNX05BTUUnLFxyXG4gICAgICAgICckPicsXHJcbiAgICAgICAgJyRDT01QSUxJTkcnLFxyXG4gICAgICAgICckUkVBTF9HUk9VUF9JRCcsXHJcbiAgICAgICAgJyQ/JyxcclxuICAgICAgICAnJERFQlVHR0lORycsXHJcbiAgICAgICAgJyRSRUFMX1VTRVJfSUQnLFxyXG4gICAgICAgICckQCcsXHJcbiAgICAgICAgJyRFRkZFQ1RJVkVfR1JPVVBfSUQnLFxyXG4gICAgICAgICckUlMnLFxyXG4gICAgICAgICckWycsXHJcbiAgICAgICAgJyRFRkZFQ1RJVkVfVVNFUl9JRCcsXHJcbiAgICAgICAgJyRTVUJTQ1JJUFRfU0VQQVJBVE9SJyxcclxuICAgICAgICAnJFxcXFwnLFxyXG4gICAgICAgICckRUdJRCcsXHJcbiAgICAgICAgJyRTVUJTRVAnLFxyXG4gICAgICAgICckXScsXHJcbiAgICAgICAgJyRFUlJOTycsXHJcbiAgICAgICAgJyRTWVNURU1fRkRfTUFYJyxcclxuICAgICAgICAnJF4nLFxyXG4gICAgICAgICckRVVJRCcsXHJcbiAgICAgICAgJyRVSUQnLFxyXG4gICAgICAgICckXkEnLFxyXG4gICAgICAgICckRVZBTF9FUlJPUicsXHJcbiAgICAgICAgJyRXQVJOSU5HJyxcclxuICAgICAgICAnJF5DJyxcclxuICAgICAgICAnJEVYQ0VQVElPTlNfQkVJTkdfQ0FVR0hUJyxcclxuICAgICAgICAnJHwnLFxyXG4gICAgICAgICckXkNISUxEX0VSUk9SX05BVElWRScsXHJcbiAgICAgICAgJyRFWEVDVVRBQkxFX05BTUUnLFxyXG4gICAgICAgICckficsXHJcbiAgICAgICAgJyReRCcsXHJcbiAgICAgICAgJyRFWFRFTkRFRF9PU19FUlJPUicsXHJcbiAgICAgICAgJyUhJyxcclxuICAgICAgICAnJF5FJyxcclxuICAgICAgICAnJEZPUk1BVF9GT1JNRkVFRCcsXHJcbiAgICAgICAgJyVeSCcsXHJcbiAgICAgICAgJyReRU5DT0RJTkcnLFxyXG4gICAgICAgICckRk9STUFUX0xJTkVfQlJFQUtfQ0hBUkFDVEVSUycsXHJcbiAgICAgICAgJyVFTlYnLFxyXG4gICAgICAgICckXkYnLFxyXG4gICAgICAgICckRk9STUFUX0xJTkVTX0xFRlQnLFxyXG4gICAgICAgICclSU5DJyxcclxuICAgICAgICAnJF5IJyxcclxuICAgICAgICAnJEZPUk1BVF9MSU5FU19QRVJfUEFHRScsXHJcbiAgICAgICAgJyVPVkVSTE9BRCcsXHJcbiAgICAgICAgJyReSScsXHJcbiAgICAgICAgJyRGT1JNQVRfTkFNRScsXHJcbiAgICAgICAgJyVTSUcnLFxyXG4gICAgICAgICckXkwnLFxyXG4gICAgICAgICckRk9STUFUX1BBR0VfTlVNQkVSJyxcclxuICAgICAgICAnQCsnLFxyXG4gICAgICAgICckXk0nLFxyXG4gICAgICAgICckRk9STUFUX1RPUF9OQU1FJyxcclxuICAgICAgICAnQC0nLFxyXG4gICAgICAgICckXk4nLFxyXG4gICAgICAgICckR0lEJyxcclxuICAgICAgICAnQF8nLFxyXG4gICAgICAgICckXk8nLFxyXG4gICAgICAgICckSU5QTEFDRV9FRElUJyxcclxuICAgICAgICAnQEFSR1YnLFxyXG4gICAgICAgICckXk9QRU4nLFxyXG4gICAgICAgICckSU5QVVRfTElORV9OVU1CRVInLFxyXG4gICAgICAgICdASU5DJyxcclxuICAgICAgICAnJF5QJyxcclxuICAgICAgICAnJElOUFVUX1JFQ09SRF9TRVBBUkFUT1InLFxyXG4gICAgICAgICdATEFTVF9NQVRDSF9TVEFSVCcsXHJcbiAgICAgICAgJyReUicsXHJcbiAgICAgICAgJyRMQVNUX01BVENIX0VORCcsXHJcbiAgICAgICAgJyReUkVfREVCVUdfRkxBR1MnLFxyXG4gICAgICAgICckTEFTVF9QQVJFTl9NQVRDSCdcclxuICAgIF0sXHJcbiAgICAvLyBvcGVyYXRvcnNcclxuICAgIHN5bWJvbHM6IC9bOitcXC1cXF4qJCYlQD08PiE/fFxcL35cXC5dLyxcclxuICAgIHF1b3RlTGlrZU9wczogWydxcicsICdtJywgJ3MnLCAncScsICdxcScsICdxeCcsICdxdycsICd0cicsICd5J10sXHJcbiAgICBlc2NhcGVzOiAvXFxcXCg/OlthYmZucnR2XFxcXFwiJ118eFswLTlBLUZhLWZdezEsNH18dVswLTlBLUZhLWZdezR9fFVbMC05QS1GYS1mXXs4fSkvLFxyXG4gICAgLy8gVGhlIG1haW4gdG9rZW5pemVyIGZvciBvdXIgbGFuZ3VhZ2VzXHJcbiAgICB0b2tlbml6ZXI6IHtcclxuICAgICAgICByb290OiBbXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0B3aGl0ZXNwYWNlJyB9LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAvW2EtekEtWlxcLV9dW1xcd1xcLV9dKi8sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BrZXl3b3Jkcyc6ICdrZXl3b3JkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BidWlsdGluRnVuY3Rpb25zJzogJ3R5cGUuaWRlbnRpZmllcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAYnVpbHRpbkZpbGVIYW5kbGVycyc6ICd2YXJpYWJsZS5wcmVkZWZpbmVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BxdW90ZUxpa2VPcHMnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogJ0ByZW1hdGNoJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6ICdxdW90ZWRDb25zdHJ1Y3RzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgLy8gUGVybCB2YXJpYWJsZXNcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgL1tcXCRAJV1bKkAjP1xcK1xcLVxcJCFcXHdcXFxcXFxePjx+OjtcXC5dKy8sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BidWlsdGluVmFyaWFibGVzJzogJ3ZhcmlhYmxlLnByZWRlZmluZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAndmFyaWFibGUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAc3RyaW5ncycgfSxcclxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGRibFN0cmluZ3MnIH0sXHJcbiAgICAgICAgICAgIC8vIFBlcmwgRG9jXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BwZXJsZG9jJyB9LFxyXG4gICAgICAgICAgICAvLyBIZXJlIERvY1xyXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAaGVyZWRvYycgfSxcclxuICAgICAgICAgICAgWy9be31cXFtcXF0oKV0vLCAnQGJyYWNrZXRzJ10sXHJcbiAgICAgICAgICAgIC8vIFJlZ0V4cFxyXG4gICAgICAgICAgICBbL1tcXC9dKD86KD86XFxbKD86XFxcXF18W15cXF1dKStcXF0pfCg/OlxcXFxcXC98W15cXF1cXC9dKSkqW1xcL11cXHcqXFxzKig/PVspLiw7XXwkKS8sICdyZWdleHAnXSxcclxuICAgICAgICAgICAgWy9Ac3ltYm9scy8sICdvcGVyYXRvcnMnXSxcclxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQG51bWJlcnMnIH0sXHJcbiAgICAgICAgICAgIFsvWyw7XS8sICdkZWxpbWl0ZXInXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgd2hpdGVzcGFjZTogW1xyXG4gICAgICAgICAgICBbL1xccysvLCAnd2hpdGUnXSxcclxuICAgICAgICAgICAgWy8oXiMhLiokKS8sICdtZXRhdGFnJ10sXHJcbiAgICAgICAgICAgIFsvKF4jLiokKS8sICdjb21tZW50J11cclxuICAgICAgICBdLFxyXG4gICAgICAgIG51bWJlcnM6IFtcclxuICAgICAgICAgICAgWy9cXGQqXFwuXFxkKyhbZUVdW1xcLStdP1xcZCspPy8sICdudW1iZXIuZmxvYXQnXSxcclxuICAgICAgICAgICAgWy8wW3hYXVswLTlhLWZBLUZfXSpbMC05YS1mQS1GXS8sICdudW1iZXIuaGV4J10sXHJcbiAgICAgICAgICAgIFsvXFxkKy8sICdudW1iZXInXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy8gU2luZ2xlIHF1b3RlIHN0cmluZ1xyXG4gICAgICAgIHN0cmluZ3M6IFtbLycvLCAnc3RyaW5nJywgJ0BzdHJpbmdCb2R5J11dLFxyXG4gICAgICAgIHN0cmluZ0JvZHk6IFtcclxuICAgICAgICAgICAgWy8nLywgJ3N0cmluZycsICdAcG9wYWxsJ10sXHJcbiAgICAgICAgICAgIFsvXFxcXCcvLCAnc3RyaW5nLmVzY2FwZSddLFxyXG4gICAgICAgICAgICBbLy4vLCAnc3RyaW5nJ11cclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIERvdWJsZSBxdW90ZSBzdHJpbmdcclxuICAgICAgICBkYmxTdHJpbmdzOiBbWy9cIi8sICdzdHJpbmcnLCAnQGRibFN0cmluZ0JvZHknXV0sXHJcbiAgICAgICAgZGJsU3RyaW5nQm9keTogW1xyXG4gICAgICAgICAgICBbL1wiLywgJ3N0cmluZycsICdAcG9wYWxsJ10sXHJcbiAgICAgICAgICAgIFsvQGVzY2FwZXMvLCAnc3RyaW5nLmVzY2FwZSddLFxyXG4gICAgICAgICAgICBbL1xcXFwuLywgJ3N0cmluZy5lc2NhcGUuaW52YWxpZCddLFxyXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAdmFyaWFibGVzJyB9LFxyXG4gICAgICAgICAgICBbLy4vLCAnc3RyaW5nJ11cclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIFF1b3RlZCBjb25zdHJ1Y3RzXHJcbiAgICAgICAgLy8gUGVyY2VudCBzdHJpbmdzIGluIFJ1YnkgYXJlIHNpbWlsYXIgdG8gcXVvdGUtbGlrZSBvcGVyYXRvcnMgaW4gUGVybC5cclxuICAgICAgICAvLyBUaGlzIGlzIGFkYXB0ZWQgZnJvbSBwc3RyaW5ncyBpbiAuLi9ydWJ5L3J1YnkudHMuXHJcbiAgICAgICAgcXVvdGVkQ29uc3RydWN0czogW1xyXG4gICAgICAgICAgICBbLyhxfHF3fHRyfHkpXFxzKlxcKC8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0Bxc3RyaW5nLiguKScgfV0sXHJcbiAgICAgICAgICAgIFsvKHF8cXd8dHJ8eSlcXHMqXFxbLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFzdHJpbmcuWy5dJyB9XSxcclxuICAgICAgICAgICAgWy8ocXxxd3x0cnx5KVxccypcXHsvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXN0cmluZy57Ln0nIH1dLFxyXG4gICAgICAgICAgICBbLyhxfHF3fHRyfHkpXFxzKjwvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXN0cmluZy48Lj4nIH1dLFxyXG4gICAgICAgICAgICBbLyhxfHF3fHRyfHkpIy8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0Bxc3RyaW5nLiMuIycgfV0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIC8ocXxxd3x0cnx5KVxccyooW15BLVphLXowLTkjXFxzXSkvLFxyXG4gICAgICAgICAgICAgICAgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFzdHJpbmcuJDIuJDInIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgWy8ocXxxd3x0cnx5KVxccysoXFx3KS8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0Bxc3RyaW5nLiQyLiQyJyB9XSxcclxuICAgICAgICAgICAgWy8ocXJ8bXxzKVxccypcXCgvLCB7IHRva2VuOiAncmVnZXhwLmRlbGltJywgc3dpdGNoVG86ICdAcXJlZ2V4cC4oLiknIH1dLFxyXG4gICAgICAgICAgICBbLyhxcnxtfHMpXFxzKlxcWy8sIHsgdG9rZW46ICdyZWdleHAuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcmVnZXhwLlsuXScgfV0sXHJcbiAgICAgICAgICAgIFsvKHFyfG18cylcXHMqXFx7LywgeyB0b2tlbjogJ3JlZ2V4cC5kZWxpbScsIHN3aXRjaFRvOiAnQHFyZWdleHAuey59JyB9XSxcclxuICAgICAgICAgICAgWy8ocXJ8bXxzKVxccyo8LywgeyB0b2tlbjogJ3JlZ2V4cC5kZWxpbScsIHN3aXRjaFRvOiAnQHFyZWdleHAuPC4+JyB9XSxcclxuICAgICAgICAgICAgWy8ocXJ8bXxzKSMvLCB7IHRva2VuOiAncmVnZXhwLmRlbGltJywgc3dpdGNoVG86ICdAcXJlZ2V4cC4jLiMnIH1dLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAvKHFyfG18cylcXHMqKFteQS1aYS16MC05XyNcXHNdKS8sXHJcbiAgICAgICAgICAgICAgICB7IHRva2VuOiAncmVnZXhwLmRlbGltJywgc3dpdGNoVG86ICdAcXJlZ2V4cC4kMi4kMicgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbLyhxcnxtfHMpXFxzKyhcXHcpLywgeyB0b2tlbjogJ3JlZ2V4cC5kZWxpbScsIHN3aXRjaFRvOiAnQHFyZWdleHAuJDIuJDInIH1dLFxyXG4gICAgICAgICAgICBbLyhxcXxxeClcXHMqXFwoLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFxc3RyaW5nLiguKScgfV0sXHJcbiAgICAgICAgICAgIFsvKHFxfHF4KVxccypcXFsvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXFzdHJpbmcuWy5dJyB9XSxcclxuICAgICAgICAgICAgWy8ocXF8cXgpXFxzKlxcey8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcXN0cmluZy57Ln0nIH1dLFxyXG4gICAgICAgICAgICBbLyhxcXxxeClcXHMqPC8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcXN0cmluZy48Lj4nIH1dLFxyXG4gICAgICAgICAgICBbLyhxcXxxeCkjLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFxc3RyaW5nLiMuIycgfV0sXHJcbiAgICAgICAgICAgIFsvKHFxfHF4KVxccyooW15BLVphLXowLTkjXFxzXSkvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXFzdHJpbmcuJDIuJDInIH1dLFxyXG4gICAgICAgICAgICBbLyhxcXxxeClcXHMrKFxcdykvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXFzdHJpbmcuJDIuJDInIH1dXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvLyBOb24tZXhwYW5kZWQgcXVvdGVkIHN0cmluZ1xyXG4gICAgICAgIC8vIHFzdHJpbmc8b3Blbj4uPGNsb3NlPlxyXG4gICAgICAgIC8vICBvcGVuID0gb3BlbiBkZWxpbWl0ZXJcclxuICAgICAgICAvLyAgY2xvc2UgPSBjbG9zZSBkZWxpbWl0ZXJcclxuICAgICAgICBxc3RyaW5nOiBbXHJcbiAgICAgICAgICAgIFsvXFxcXC4vLCAnc3RyaW5nLmVzY2FwZSddLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAvLi8sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQjPT0kUzMnOiB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgbmV4dDogJ0Bwb3AnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckIz09JFMyJzogeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIG5leHQ6ICdAcHVzaCcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIFF1b3RlZCByZWdleHBcclxuICAgICAgICAvLyBxcmVnZXhwLjxvcGVuPi48Y2xvc2U+XHJcbiAgICAgICAgLy8gIG9wZW4gPSBvcGVuIGRlbGltaXRlclxyXG4gICAgICAgIC8vICBjbG9zZSA9IGNsb3NlIGRlbGltaXRlclxyXG4gICAgICAgIHFyZWdleHA6IFtcclxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHZhcmlhYmxlcycgfSxcclxuICAgICAgICAgICAgWy9cXFxcLi8sICdyZWdleHAuZXNjYXBlJ10sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIC8uLyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJCM9PSRTMyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAncmVnZXhwLmRlbGltJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6ICdAcmVnZXhwTW9kaWZpZXJzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJCM9PSRTMic6IHsgdG9rZW46ICdyZWdleHAuZGVsaW0nLCBuZXh0OiAnQHB1c2gnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICdyZWdleHAnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICByZWdleHBNb2RpZmllcnM6IFtbL1ttc2l4cG9kdWFsbmdjZXJdKy8sIHsgdG9rZW46ICdyZWdleHAubW9kaWZpZXInLCBuZXh0OiAnQHBvcGFsbCcgfV1dLFxyXG4gICAgICAgIC8vIEV4cGFuZGVkIHF1b3RlZCBzdHJpbmdcclxuICAgICAgICAvLyBxcXN0cmluZy48b3Blbj4uPGNsb3NlPlxyXG4gICAgICAgIC8vICBvcGVuID0gb3BlbiBkZWxpbWl0ZXJcclxuICAgICAgICAvLyAgY2xvc2UgPSBjbG9zZSBkZWxpbWl0ZXJcclxuICAgICAgICBxcXN0cmluZzogW3sgaW5jbHVkZTogJ0B2YXJpYWJsZXMnIH0sIHsgaW5jbHVkZTogJ0Bxc3RyaW5nJyB9XSxcclxuICAgICAgICBoZXJlZG9jOiBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIC88PFxccypbJ1wiYF0/KFtcXHdcXC1dKylbJ1wiYF0/LyxcclxuICAgICAgICAgICAgICAgIHsgdG9rZW46ICdzdHJpbmcuaGVyZWRvYy5kZWxpbWl0ZXInLCBuZXh0OiAnQGhlcmVkb2NCb2R5LiQxJyB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIGhlcmVkb2NCb2R5OiBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIC9eKFtcXHdcXC1dKykkLyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDE9PSRTMic6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogJ3N0cmluZy5oZXJlZG9jLmRlbGltaXRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogJ0Bwb3BhbGwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICdzdHJpbmcuaGVyZWRvYydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFsvLi8sICdzdHJpbmcuaGVyZWRvYyddXHJcbiAgICAgICAgXSxcclxuICAgICAgICBwZXJsZG9jOiBbWy9ePVxcdy8sICdjb21tZW50LmRvYycsICdAcGVybGRvY0JvZHknXV0sXHJcbiAgICAgICAgcGVybGRvY0JvZHk6IFtcclxuICAgICAgICAgICAgWy9ePWN1dFxcYi8sICd0eXBlLmlkZW50aWZpZXInLCAnQHBvcGFsbCddLFxyXG4gICAgICAgICAgICBbLy4vLCAnY29tbWVudC5kb2MnXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgdmFyaWFibGVzOiBbXHJcbiAgICAgICAgICAgIFsvXFwkXFx3Ky8sICd2YXJpYWJsZSddLFxyXG4gICAgICAgICAgICBbL0BcXHcrLywgJ3ZhcmlhYmxlJ10sXHJcbiAgICAgICAgICAgIFsvJVxcdysvLCAndmFyaWFibGUnXSAvLyBrZXkvdmFsdWVcclxuICAgICAgICBdXHJcbiAgICB9XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=